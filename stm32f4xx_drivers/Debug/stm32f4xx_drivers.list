
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080020a4  080020a4  000120a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800215c  0800215c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800215c  0800215c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800215c  0800215c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800215c  0800215c  0001215c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002160  08002160  00012160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000074  080021d8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080021d8  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f20  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000085a  00000000  00000000  00021fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000258  00000000  00000000  00022820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000200  00000000  00000000  00022a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035e0  00000000  00000000  00022c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002840  00000000  00000000  00026258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c20d  00000000  00000000  00028a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00034ca5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010a8  00000000  00000000  00034cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800208c 	.word	0x0800208c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800208c 	.word	0x0800208c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <delay>:
// For semihosting
extern void initialise_monitor_handles();
// Receive buffer
uint8_t rcv_buf[32];
void delay(void)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<5000000;i++);
 8000286:	2300      	movs	r3, #0
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	e002      	b.n	8000292 <delay+0x12>
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	3301      	adds	r3, #1
 8000290:	607b      	str	r3, [r7, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4a04      	ldr	r2, [pc, #16]	; (80002a8 <delay+0x28>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d9f8      	bls.n	800028c <delay+0xc>
}
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	004c4b3f 	.word	0x004c4b3f

080002ac <I2C1_GPIO_Inits>:
void I2C1_GPIO_Inits(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2C1Pins;
	I2C1Pins.pGPIOx = GPIOB;
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <I2C1_GPIO_Inits+0x40>)
 80002b4:	60fb      	str	r3, [r7, #12]
	I2C1Pins.GPIO_PinConfig.GPIO_PinMode 		=  GPIO_MODE_ALTFN;
 80002b6:	2302      	movs	r3, #2
 80002b8:	717b      	strb	r3, [r7, #5]
	I2C1Pins.GPIO_PinConfig.GPIO_PinSpeed 		=  GPIO_SPEED_FAST;
 80002ba:	2302      	movs	r3, #2
 80002bc:	71bb      	strb	r3, [r7, #6]
	I2C1Pins.GPIO_PinConfig.GPIO_PinOpType 		=  GPIO_OP_TYPE_OD;
 80002be:	2301      	movs	r3, #1
 80002c0:	723b      	strb	r3, [r7, #8]
	I2C1Pins.GPIO_PinConfig.GPIO_PinPuPdControl =  GPIO_PIN_PU;
 80002c2:	2301      	movs	r3, #1
 80002c4:	71fb      	strb	r3, [r7, #7]
	I2C1Pins.GPIO_PinConfig.GPIO_PinAltFunMode  =  4;
 80002c6:	2304      	movs	r3, #4
 80002c8:	727b      	strb	r3, [r7, #9]
	// PA6 Used as SCL
	I2C1Pins.GPIO_PinConfig.GPIO_PinNumber 		= GPIO_PIN_NO_6;
 80002ca:	2306      	movs	r3, #6
 80002cc:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&I2C1Pins);
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 fa2f 	bl	8000734 <GPIO_Init>
	// PA9 Used as SDA
	I2C1Pins.GPIO_PinConfig.GPIO_PinNumber 		= GPIO_PIN_NO_7;
 80002d6:	2307      	movs	r3, #7
 80002d8:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&I2C1Pins);
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 fa29 	bl	8000734 <GPIO_Init>
}
 80002e2:	bf00      	nop
 80002e4:	3710      	adds	r7, #16
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40020400 	.word	0x40020400

080002f0 <GPIO_ButtonInit>:
void GPIO_ButtonInit()
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;
	GpioBtn.pGPIOx = GPIOA;
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <GPIO_ButtonInit+0x2c>)
 80002f8:	60fb      	str	r3, [r7, #12]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	713b      	strb	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002fe:	2300      	movs	r3, #0
 8000300:	717b      	strb	r3, [r7, #5]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000302:	2303      	movs	r3, #3
 8000304:	71bb      	strb	r3, [r7, #6]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000306:	2300      	movs	r3, #0
 8000308:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(&GpioBtn);
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4618      	mov	r0, r3
 800030e:	f000 fa11 	bl	8000734 <GPIO_Init>
}
 8000312:	bf00      	nop
 8000314:	3710      	adds	r7, #16
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40020000 	.word	0x40020000

08000320 <I2C1Inits>:
void I2C1Inits()
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	//I2C_Handle_t I2C1_Handle;
	I2C1_Handle.pI2Cx = I2C1;
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <I2C1Inits+0x2c>)
 8000326:	4a0a      	ldr	r2, [pc, #40]	; (8000350 <I2C1Inits+0x30>)
 8000328:	601a      	str	r2, [r3, #0]
	I2C1_Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <I2C1Inits+0x2c>)
 800032c:	2201      	movs	r2, #1
 800032e:	725a      	strb	r2, [r3, #9]
	I2C1_Handle.I2C_Config.I2C_DeviceAddress = MYADDR;
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <I2C1Inits+0x2c>)
 8000332:	2261      	movs	r2, #97	; 0x61
 8000334:	721a      	strb	r2, [r3, #8]
	I2C1_Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000336:	4b05      	ldr	r3, [pc, #20]	; (800034c <I2C1Inits+0x2c>)
 8000338:	2200      	movs	r2, #0
 800033a:	815a      	strh	r2, [r3, #10]
	I2C1_Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800033c:	4b03      	ldr	r3, [pc, #12]	; (800034c <I2C1Inits+0x2c>)
 800033e:	4a05      	ldr	r2, [pc, #20]	; (8000354 <I2C1Inits+0x34>)
 8000340:	605a      	str	r2, [r3, #4]
	I2C_Init(&I2C1_Handle);
 8000342:	4802      	ldr	r0, [pc, #8]	; (800034c <I2C1Inits+0x2c>)
 8000344:	f000 fcae 	bl	8000ca4 <I2C_Init>
}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000090 	.word	0x20000090
 8000350:	40005400 	.word	0x40005400
 8000354:	000186a0 	.word	0x000186a0

08000358 <main>:

int main()
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af02      	add	r7, sp, #8
	// To read a data from the Slave a master should forst know about
	// the length of the data
	// So we use command 0x51 to know the length of the data
	// After a button press 0x51 is send to the slvae and ACK is awaited
	uint8_t commandcode,len;
	initialise_monitor_handles();
 800035e:	f000 f875 	bl	800044c <initialise_monitor_handles>
	printf("Application is Running");
 8000362:	4821      	ldr	r0, [pc, #132]	; (80003e8 <main+0x90>)
 8000364:	f000 ff04 	bl	8001170 <iprintf>
	// I2C Pin Inits
	I2C1_GPIO_Inits();
 8000368:	f7ff ffa0 	bl	80002ac <I2C1_GPIO_Inits>
	// I2C1 inits
	I2C1Inits();
 800036c:	f7ff ffd8 	bl	8000320 <I2C1Inits>
	// Enable the I2C Peripheral - (PE Bit)
	//I2C_PeripheralControl(I2C1_Handle.pI2Cx, ENABLE);
	// Wait for button Press
	// Button Init
	GPIO_ButtonInit();
 8000370:	f7ff ffbe 	bl	80002f0 <GPIO_ButtonInit>
	while(1)
	{
		/***DATA WRITE*********************************************/
		// Wait till the Button is Pressed
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000374:	bf00      	nop
 8000376:	2100      	movs	r1, #0
 8000378:	481c      	ldr	r0, [pc, #112]	; (80003ec <main+0x94>)
 800037a:	f000 fb77 	bl	8000a6c <GPIO_ReadFromInputPin>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d0f8      	beq.n	8000376 <main+0x1e>
		delay();
 8000384:	f7ff ff7c 	bl	8000280 <delay>
		 //Send some data to the Slave
		commandcode = 0x51; // Send it to the slave and receive the length of the data
 8000388:	2351      	movs	r3, #81	; 0x51
 800038a:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C1_Handle, &commandcode, 1, SLAVE_ADDR,I2C_ENABLE_SR);
 800038c:	1df9      	adds	r1, r7, #7
 800038e:	2301      	movs	r3, #1
 8000390:	9300      	str	r3, [sp, #0]
 8000392:	2368      	movs	r3, #104	; 0x68
 8000394:	2201      	movs	r2, #1
 8000396:	4816      	ldr	r0, [pc, #88]	; (80003f0 <main+0x98>)
 8000398:	f000 fd74 	bl	8000e84 <I2C_MasterSendData>
		/***DATA READ*********************************************/
		I2C_MasterReceiveData(&I2C1_Handle, &len, 1, SLAVE_ADDR,I2C_ENABLE_SR);
 800039c:	1db9      	adds	r1, r7, #6
 800039e:	2301      	movs	r3, #1
 80003a0:	9300      	str	r3, [sp, #0]
 80003a2:	2368      	movs	r3, #104	; 0x68
 80003a4:	2201      	movs	r2, #1
 80003a6:	4812      	ldr	r0, [pc, #72]	; (80003f0 <main+0x98>)
 80003a8:	f000 fdd1 	bl	8000f4e <I2C_MasterReceiveData>
		/**********************************************************/
		// Got the length
		/**********************************************************/
		commandcode = 0x52;
 80003ac:	2352      	movs	r3, #82	; 0x52
 80003ae:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C1_Handle, &commandcode, 1, SLAVE_ADDR,I2C_ENABLE_SR);
 80003b0:	1df9      	adds	r1, r7, #7
 80003b2:	2301      	movs	r3, #1
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	2368      	movs	r3, #104	; 0x68
 80003b8:	2201      	movs	r2, #1
 80003ba:	480d      	ldr	r0, [pc, #52]	; (80003f0 <main+0x98>)
 80003bc:	f000 fd62 	bl	8000e84 <I2C_MasterSendData>
		I2C_MasterReceiveData(&I2C1_Handle, rcv_buf, len, SLAVE_ADDR,I2C_DISABLE_SR);
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	461a      	mov	r2, r3
 80003c4:	2300      	movs	r3, #0
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	2368      	movs	r3, #104	; 0x68
 80003ca:	490a      	ldr	r1, [pc, #40]	; (80003f4 <main+0x9c>)
 80003cc:	4808      	ldr	r0, [pc, #32]	; (80003f0 <main+0x98>)
 80003ce:	f000 fdbe 	bl	8000f4e <I2C_MasterReceiveData>
		// rcv_buf is an array so no need to use & (See in eclipse Arrays passing to a function code)
		rcv_buf[len+1] = '\0';
 80003d2:	79bb      	ldrb	r3, [r7, #6]
 80003d4:	3301      	adds	r3, #1
 80003d6:	4a07      	ldr	r2, [pc, #28]	; (80003f4 <main+0x9c>)
 80003d8:	2100      	movs	r1, #0
 80003da:	54d1      	strb	r1, [r2, r3]
		printf("Data:%s",rcv_buf);
 80003dc:	4905      	ldr	r1, [pc, #20]	; (80003f4 <main+0x9c>)
 80003de:	4806      	ldr	r0, [pc, #24]	; (80003f8 <main+0xa0>)
 80003e0:	f000 fec6 	bl	8001170 <iprintf>
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80003e4:	e7c6      	b.n	8000374 <main+0x1c>
 80003e6:	bf00      	nop
 80003e8:	080020a4 	.word	0x080020a4
 80003ec:	40020000 	.word	0x40020000
 80003f0:	20000090 	.word	0x20000090
 80003f4:	200000b8 	.word	0x200000b8
 80003f8:	080020bc 	.word	0x080020bc

080003fc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000406:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <ITM_SendChar+0x48>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a0e      	ldr	r2, [pc, #56]	; (8000444 <ITM_SendChar+0x48>)
 800040c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000410:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000412:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <ITM_SendChar+0x4c>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a0c      	ldr	r2, [pc, #48]	; (8000448 <ITM_SendChar+0x4c>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800041e:	bf00      	nop
 8000420:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	2b00      	cmp	r3, #0
 800042c:	d0f8      	beq.n	8000420 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800042e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	6013      	str	r3, [r2, #0]
}
 8000436:	bf00      	nop
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	e000edfc 	.word	0xe000edfc
 8000448:	e0000e00 	.word	0xe0000e00

0800044c <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr

0800045a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b086      	sub	sp, #24
 800045e:	af00      	add	r7, sp, #0
 8000460:	60f8      	str	r0, [r7, #12]
 8000462:	60b9      	str	r1, [r7, #8]
 8000464:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000466:	2300      	movs	r3, #0
 8000468:	617b      	str	r3, [r7, #20]
 800046a:	e00a      	b.n	8000482 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800046c:	f3af 8000 	nop.w
 8000470:	4601      	mov	r1, r0
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	1c5a      	adds	r2, r3, #1
 8000476:	60ba      	str	r2, [r7, #8]
 8000478:	b2ca      	uxtb	r2, r1
 800047a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	3301      	adds	r3, #1
 8000480:	617b      	str	r3, [r7, #20]
 8000482:	697a      	ldr	r2, [r7, #20]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	429a      	cmp	r2, r3
 8000488:	dbf0      	blt.n	800046c <_read+0x12>
	}

return len;
 800048a:	687b      	ldr	r3, [r7, #4]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3718      	adds	r7, #24
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]
 80004a4:	e009      	b.n	80004ba <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	1c5a      	adds	r2, r3, #1
 80004aa:	60ba      	str	r2, [r7, #8]
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff ffa4 	bl	80003fc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	3301      	adds	r3, #1
 80004b8:	617b      	str	r3, [r7, #20]
 80004ba:	697a      	ldr	r2, [r7, #20]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	429a      	cmp	r2, r3
 80004c0:	dbf1      	blt.n	80004a6 <_write+0x12>
		//__io_putchar(*ptr++);
	}
	return len;
 80004c2:	687b      	ldr	r3, [r7, #4]
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3718      	adds	r7, #24
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <_close>:

int _close(int file)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	return -1;
 80004d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004d8:	4618      	mov	r0, r3
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004f4:	605a      	str	r2, [r3, #4]
	return 0;
 80004f6:	2300      	movs	r3, #0
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <_isatty>:

int _isatty(int file)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	return 1;
 800050c:	2301      	movs	r3, #1
}
 800050e:	4618      	mov	r0, r3
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800051a:	b480      	push	{r7}
 800051c:	b085      	sub	sp, #20
 800051e:	af00      	add	r7, sp, #0
 8000520:	60f8      	str	r0, [r7, #12]
 8000522:	60b9      	str	r1, [r7, #8]
 8000524:	607a      	str	r2, [r7, #4]
	return 0;
 8000526:	2300      	movs	r3, #0
}
 8000528:	4618      	mov	r0, r3
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800053c:	4a14      	ldr	r2, [pc, #80]	; (8000590 <_sbrk+0x5c>)
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <_sbrk+0x60>)
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <_sbrk+0x64>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d102      	bne.n	8000556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <_sbrk+0x64>)
 8000552:	4a12      	ldr	r2, [pc, #72]	; (800059c <_sbrk+0x68>)
 8000554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <_sbrk+0x64>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	693a      	ldr	r2, [r7, #16]
 8000560:	429a      	cmp	r2, r3
 8000562:	d207      	bcs.n	8000574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000564:	f000 fdd2 	bl	800110c <__errno>
 8000568:	4603      	mov	r3, r0
 800056a:	220c      	movs	r2, #12
 800056c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
 8000572:	e009      	b.n	8000588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <_sbrk+0x64>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <_sbrk+0x64>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4413      	add	r3, r2
 8000582:	4a05      	ldr	r2, [pc, #20]	; (8000598 <_sbrk+0x64>)
 8000584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000586:	68fb      	ldr	r3, [r7, #12]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20020000 	.word	0x20020000
 8000594:	00000400 	.word	0x00000400
 8000598:	200000d8 	.word	0x200000d8
 800059c:	200000f0 	.word	0x200000f0

080005a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005a0:	480d      	ldr	r0, [pc, #52]	; (80005d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a8:	480c      	ldr	r0, [pc, #48]	; (80005dc <LoopForever+0x6>)
  ldr r1, =_edata
 80005aa:	490d      	ldr	r1, [pc, #52]	; (80005e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005ac:	4a0d      	ldr	r2, [pc, #52]	; (80005e4 <LoopForever+0xe>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b0:	e002      	b.n	80005b8 <LoopCopyDataInit>

080005b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b6:	3304      	adds	r3, #4

080005b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005bc:	d3f9      	bcc.n	80005b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005be:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c0:	4c0a      	ldr	r4, [pc, #40]	; (80005ec <LoopForever+0x16>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c4:	e001      	b.n	80005ca <LoopFillZerobss>

080005c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c8:	3204      	adds	r2, #4

080005ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005cc:	d3fb      	bcc.n	80005c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ce:	f000 fda3 	bl	8001118 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d2:	f7ff fec1 	bl	8000358 <main>

080005d6 <LoopForever>:

LoopForever:
    b LoopForever
 80005d6:	e7fe      	b.n	80005d6 <LoopForever>
  ldr   r0, =_estack
 80005d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80005e4:	08002164 	.word	0x08002164
  ldr r2, =_sbss
 80005e8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80005ec:	200000ec 	.word	0x200000ec

080005f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f0:	e7fe      	b.n	80005f0 <ADC_IRQHandler>
	...

080005f4 <GPIO_PeriClockControl>:
	* @param  pin_no 		: ENABLE OR DISABLE MACROS
	* @return 				: None
*/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx,uint8_t EnOrDi)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d141      	bne.n	800068a <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA) GPIOA_PCLK_EN();
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a43      	ldr	r2, [pc, #268]	; (8000718 <GPIO_PeriClockControl+0x124>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d106      	bne.n	800061c <GPIO_PeriClockControl+0x28>
 800060e:	4b43      	ldr	r3, [pc, #268]	; (800071c <GPIO_PeriClockControl+0x128>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a42      	ldr	r2, [pc, #264]	; (800071c <GPIO_PeriClockControl+0x128>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOC) GPIOC_PCLK_DI();
		else if(pGPIOx == GPIOD) GPIOD_PCLK_DI();
		else if(pGPIOx == GPIOE) GPIOE_PCLK_DI();
		else if(pGPIOx == GPIOH) GPIOH_PCLK_DI();
	}
}
 800061a:	e077      	b.n	800070c <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB) GPIOB_PCLK_EN();
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a40      	ldr	r2, [pc, #256]	; (8000720 <GPIO_PeriClockControl+0x12c>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d106      	bne.n	8000632 <GPIO_PeriClockControl+0x3e>
 8000624:	4b3d      	ldr	r3, [pc, #244]	; (800071c <GPIO_PeriClockControl+0x128>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	4a3c      	ldr	r2, [pc, #240]	; (800071c <GPIO_PeriClockControl+0x128>)
 800062a:	f043 0302 	orr.w	r3, r3, #2
 800062e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000630:	e06c      	b.n	800070c <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC) GPIOC_PCLK_EN();
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a3b      	ldr	r2, [pc, #236]	; (8000724 <GPIO_PeriClockControl+0x130>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d106      	bne.n	8000648 <GPIO_PeriClockControl+0x54>
 800063a:	4b38      	ldr	r3, [pc, #224]	; (800071c <GPIO_PeriClockControl+0x128>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a37      	ldr	r2, [pc, #220]	; (800071c <GPIO_PeriClockControl+0x128>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000646:	e061      	b.n	800070c <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD) GPIOD_PCLK_EN();
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a37      	ldr	r2, [pc, #220]	; (8000728 <GPIO_PeriClockControl+0x134>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d106      	bne.n	800065e <GPIO_PeriClockControl+0x6a>
 8000650:	4b32      	ldr	r3, [pc, #200]	; (800071c <GPIO_PeriClockControl+0x128>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	4a31      	ldr	r2, [pc, #196]	; (800071c <GPIO_PeriClockControl+0x128>)
 8000656:	f043 0308 	orr.w	r3, r3, #8
 800065a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800065c:	e056      	b.n	800070c <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOE) GPIOE_PCLK_EN();
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a32      	ldr	r2, [pc, #200]	; (800072c <GPIO_PeriClockControl+0x138>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d106      	bne.n	8000674 <GPIO_PeriClockControl+0x80>
 8000666:	4b2d      	ldr	r3, [pc, #180]	; (800071c <GPIO_PeriClockControl+0x128>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a2c      	ldr	r2, [pc, #176]	; (800071c <GPIO_PeriClockControl+0x128>)
 800066c:	f043 0310 	orr.w	r3, r3, #16
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000672:	e04b      	b.n	800070c <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOH) GPIOH_PCLK_EN();
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a2e      	ldr	r2, [pc, #184]	; (8000730 <GPIO_PeriClockControl+0x13c>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d147      	bne.n	800070c <GPIO_PeriClockControl+0x118>
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <GPIO_PeriClockControl+0x128>)
 800067e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000680:	4a26      	ldr	r2, [pc, #152]	; (800071c <GPIO_PeriClockControl+0x128>)
 8000682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000686:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000688:	e040      	b.n	800070c <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA) GPIOA_PCLK_DI();
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a22      	ldr	r2, [pc, #136]	; (8000718 <GPIO_PeriClockControl+0x124>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d106      	bne.n	80006a0 <GPIO_PeriClockControl+0xac>
 8000692:	4b22      	ldr	r3, [pc, #136]	; (800071c <GPIO_PeriClockControl+0x128>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a21      	ldr	r2, [pc, #132]	; (800071c <GPIO_PeriClockControl+0x128>)
 8000698:	f023 0301 	bic.w	r3, r3, #1
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800069e:	e035      	b.n	800070c <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB) GPIOB_PCLK_DI();
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a1f      	ldr	r2, [pc, #124]	; (8000720 <GPIO_PeriClockControl+0x12c>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d106      	bne.n	80006b6 <GPIO_PeriClockControl+0xc2>
 80006a8:	4b1c      	ldr	r3, [pc, #112]	; (800071c <GPIO_PeriClockControl+0x128>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ac:	4a1b      	ldr	r2, [pc, #108]	; (800071c <GPIO_PeriClockControl+0x128>)
 80006ae:	f023 0302 	bic.w	r3, r3, #2
 80006b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006b4:	e02a      	b.n	800070c <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC) GPIOC_PCLK_DI();
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a1a      	ldr	r2, [pc, #104]	; (8000724 <GPIO_PeriClockControl+0x130>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d106      	bne.n	80006cc <GPIO_PeriClockControl+0xd8>
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <GPIO_PeriClockControl+0x128>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a16      	ldr	r2, [pc, #88]	; (800071c <GPIO_PeriClockControl+0x128>)
 80006c4:	f023 0304 	bic.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006ca:	e01f      	b.n	800070c <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD) GPIOD_PCLK_DI();
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a16      	ldr	r2, [pc, #88]	; (8000728 <GPIO_PeriClockControl+0x134>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d106      	bne.n	80006e2 <GPIO_PeriClockControl+0xee>
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <GPIO_PeriClockControl+0x128>)
 80006d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d8:	4a10      	ldr	r2, [pc, #64]	; (800071c <GPIO_PeriClockControl+0x128>)
 80006da:	f023 0308 	bic.w	r3, r3, #8
 80006de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006e0:	e014      	b.n	800070c <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOE) GPIOE_PCLK_DI();
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a11      	ldr	r2, [pc, #68]	; (800072c <GPIO_PeriClockControl+0x138>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d106      	bne.n	80006f8 <GPIO_PeriClockControl+0x104>
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <GPIO_PeriClockControl+0x128>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a0b      	ldr	r2, [pc, #44]	; (800071c <GPIO_PeriClockControl+0x128>)
 80006f0:	f023 0310 	bic.w	r3, r3, #16
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006f6:	e009      	b.n	800070c <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOH) GPIOH_PCLK_DI();
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a0d      	ldr	r2, [pc, #52]	; (8000730 <GPIO_PeriClockControl+0x13c>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d105      	bne.n	800070c <GPIO_PeriClockControl+0x118>
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <GPIO_PeriClockControl+0x128>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000704:	4a05      	ldr	r2, [pc, #20]	; (800071c <GPIO_PeriClockControl+0x128>)
 8000706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800070a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	40020000 	.word	0x40020000
 800071c:	40023800 	.word	0x40023800
 8000720:	40020400 	.word	0x40020400
 8000724:	40020800 	.word	0x40020800
 8000728:	40020c00 	.word	0x40020c00
 800072c:	40021000 	.word	0x40021000
 8000730:	40021c00 	.word	0x40021c00

08000734 <GPIO_Init>:
	* 						  Pullup or Pulldown, Pin Output Type, Pin Alternative function mode)
	* @param[*pGPIOHandle]  : It is the data present in that structure
	* @return 				: None
*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	//0. Enabling the Clock for the GPIO
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	689b      	ldr	r3, [r3, #8]
 8000740:	2101      	movs	r1, #1
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff56 	bl	80005f4 <GPIO_PeriClockControl>

	// 1. Configure the Mode of GPIO Pin
	uint32_t temp=0; // temp.register
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	785b      	ldrb	r3, [r3, #1]
 8000750:	2b03      	cmp	r3, #3
 8000752:	d81f      	bhi.n	8000794 <GPIO_Init+0x60>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	785b      	ldrb	r3, [r3, #1]
 8000758:	461a      	mov	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	fa02 f303 	lsl.w	r3, r2, r3
 8000764:	60fb      	str	r3, [r7, #12]
		/* 2 multiplication with the Pin Number is because Each Pin Mode takes two bits for their modes*/
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clearing the required bits
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4619      	mov	r1, r3
 8000772:	2303      	movs	r3, #3
 8000774:	408b      	lsls	r3, r1
 8000776:	43db      	mvns	r3, r3
 8000778:	4619      	mov	r1, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	689b      	ldr	r3, [r3, #8]
 800077e:	400a      	ands	r2, r1
 8000780:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;  // Setting the required bits
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	6819      	ldr	r1, [r3, #0]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	430a      	orrs	r2, r1
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	e0a1      	b.n	80008d8 <GPIO_Init+0x1a4>
	}
	else
	{
		// This part will be coded later (Interrupt Mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	785b      	ldrb	r3, [r3, #1]
 8000798:	2b04      	cmp	r3, #4
 800079a:	d117      	bne.n	80007cc <GPIO_Init+0x98>
		{
			//1. Configure the FTSR
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800079c:	4b96      	ldr	r3, [pc, #600]	; (80009f8 <GPIO_Init+0x2c4>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	7812      	ldrb	r2, [r2, #0]
 80007a4:	4611      	mov	r1, r2
 80007a6:	2201      	movs	r2, #1
 80007a8:	408a      	lsls	r2, r1
 80007aa:	4611      	mov	r1, r2
 80007ac:	4a92      	ldr	r2, [pc, #584]	; (80009f8 <GPIO_Init+0x2c4>)
 80007ae:	430b      	orrs	r3, r1
 80007b0:	60d3      	str	r3, [r2, #12]
			// Clearing the Corresponding RTSR Bit
			EXTI->EXTI_RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007b2:	4b91      	ldr	r3, [pc, #580]	; (80009f8 <GPIO_Init+0x2c4>)
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	7812      	ldrb	r2, [r2, #0]
 80007ba:	4611      	mov	r1, r2
 80007bc:	2201      	movs	r2, #1
 80007be:	408a      	lsls	r2, r1
 80007c0:	43d2      	mvns	r2, r2
 80007c2:	4611      	mov	r1, r2
 80007c4:	4a8c      	ldr	r2, [pc, #560]	; (80009f8 <GPIO_Init+0x2c4>)
 80007c6:	400b      	ands	r3, r1
 80007c8:	6093      	str	r3, [r2, #8]
 80007ca:	e035      	b.n	8000838 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	785b      	ldrb	r3, [r3, #1]
 80007d0:	2b05      	cmp	r3, #5
 80007d2:	d117      	bne.n	8000804 <GPIO_Init+0xd0>
		{
			//1. Configure the RTSR
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007d4:	4b88      	ldr	r3, [pc, #544]	; (80009f8 <GPIO_Init+0x2c4>)
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	4611      	mov	r1, r2
 80007de:	2201      	movs	r2, #1
 80007e0:	408a      	lsls	r2, r1
 80007e2:	4611      	mov	r1, r2
 80007e4:	4a84      	ldr	r2, [pc, #528]	; (80009f8 <GPIO_Init+0x2c4>)
 80007e6:	430b      	orrs	r3, r1
 80007e8:	6093      	str	r3, [r2, #8]
			// Clearing the Corresponding FTSR Bit
			EXTI->EXTI_FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007ea:	4b83      	ldr	r3, [pc, #524]	; (80009f8 <GPIO_Init+0x2c4>)
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	4611      	mov	r1, r2
 80007f4:	2201      	movs	r2, #1
 80007f6:	408a      	lsls	r2, r1
 80007f8:	43d2      	mvns	r2, r2
 80007fa:	4611      	mov	r1, r2
 80007fc:	4a7e      	ldr	r2, [pc, #504]	; (80009f8 <GPIO_Init+0x2c4>)
 80007fe:	400b      	ands	r3, r1
 8000800:	60d3      	str	r3, [r2, #12]
 8000802:	e019      	b.n	8000838 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	785b      	ldrb	r3, [r3, #1]
 8000808:	2b06      	cmp	r3, #6
 800080a:	d115      	bne.n	8000838 <GPIO_Init+0x104>
		{
			//1. Configure both FTSR and RTSR
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800080c:	4b7a      	ldr	r3, [pc, #488]	; (80009f8 <GPIO_Init+0x2c4>)
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	7812      	ldrb	r2, [r2, #0]
 8000814:	4611      	mov	r1, r2
 8000816:	2201      	movs	r2, #1
 8000818:	408a      	lsls	r2, r1
 800081a:	4611      	mov	r1, r2
 800081c:	4a76      	ldr	r2, [pc, #472]	; (80009f8 <GPIO_Init+0x2c4>)
 800081e:	430b      	orrs	r3, r1
 8000820:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000822:	4b75      	ldr	r3, [pc, #468]	; (80009f8 <GPIO_Init+0x2c4>)
 8000824:	68db      	ldr	r3, [r3, #12]
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	7812      	ldrb	r2, [r2, #0]
 800082a:	4611      	mov	r1, r2
 800082c:	2201      	movs	r2, #1
 800082e:	408a      	lsls	r2, r1
 8000830:	4611      	mov	r1, r2
 8000832:	4a71      	ldr	r2, [pc, #452]	; (80009f8 <GPIO_Init+0x2c4>)
 8000834:	430b      	orrs	r3, r1
 8000836:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO Port Selection in SYSCFG_EXTICR
		uint8_t temp1=(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	089b      	lsrs	r3, r3, #2
 800083e:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2=(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	f003 0303 	and.w	r3, r3, #3
 8000848:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	4a6b      	ldr	r2, [pc, #428]	; (80009fc <GPIO_Init+0x2c8>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d024      	beq.n	800089e <GPIO_Init+0x16a>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	4a69      	ldr	r2, [pc, #420]	; (8000a00 <GPIO_Init+0x2cc>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d01d      	beq.n	800089a <GPIO_Init+0x166>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	4a68      	ldr	r2, [pc, #416]	; (8000a04 <GPIO_Init+0x2d0>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d016      	beq.n	8000896 <GPIO_Init+0x162>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	4a66      	ldr	r2, [pc, #408]	; (8000a08 <GPIO_Init+0x2d4>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d00f      	beq.n	8000892 <GPIO_Init+0x15e>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	4a65      	ldr	r2, [pc, #404]	; (8000a0c <GPIO_Init+0x2d8>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d008      	beq.n	800088e <GPIO_Init+0x15a>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	4a63      	ldr	r2, [pc, #396]	; (8000a10 <GPIO_Init+0x2dc>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d101      	bne.n	800088a <GPIO_Init+0x156>
 8000886:	2307      	movs	r3, #7
 8000888:	e00a      	b.n	80008a0 <GPIO_Init+0x16c>
 800088a:	2300      	movs	r3, #0
 800088c:	e008      	b.n	80008a0 <GPIO_Init+0x16c>
 800088e:	2304      	movs	r3, #4
 8000890:	e006      	b.n	80008a0 <GPIO_Init+0x16c>
 8000892:	2303      	movs	r3, #3
 8000894:	e004      	b.n	80008a0 <GPIO_Init+0x16c>
 8000896:	2302      	movs	r3, #2
 8000898:	e002      	b.n	80008a0 <GPIO_Init+0x16c>
 800089a:	2301      	movs	r3, #1
 800089c:	e000      	b.n	80008a0 <GPIO_Init+0x16c>
 800089e:	2300      	movs	r3, #0
 80008a0:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 80008a2:	4b5c      	ldr	r3, [pc, #368]	; (8000a14 <GPIO_Init+0x2e0>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	4a5b      	ldr	r2, [pc, #364]	; (8000a14 <GPIO_Init+0x2e0>)
 80008a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ac:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->SYSCFG_EXTICR[temp1] = portcode << (temp2*4);
 80008ae:	7a7a      	ldrb	r2, [r7, #9]
 80008b0:	7abb      	ldrb	r3, [r7, #10]
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	fa02 f103 	lsl.w	r1, r2, r3
 80008b8:	4a57      	ldr	r2, [pc, #348]	; (8000a18 <GPIO_Init+0x2e4>)
 80008ba:	7afb      	ldrb	r3, [r7, #11]
 80008bc:	3302      	adds	r3, #2
 80008be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		//3. Enable the EXTI Interrupt delivery using IMR
		// Setting the bit as 1 enables the Interrupt by Un-masking
		EXTI->EXTI_IMR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008c2:	4b4d      	ldr	r3, [pc, #308]	; (80009f8 <GPIO_Init+0x2c4>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	7812      	ldrb	r2, [r2, #0]
 80008ca:	4611      	mov	r1, r2
 80008cc:	2201      	movs	r2, #1
 80008ce:	408a      	lsls	r2, r1
 80008d0:	4611      	mov	r1, r2
 80008d2:	4a49      	ldr	r2, [pc, #292]	; (80009f8 <GPIO_Init+0x2c4>)
 80008d4:	430b      	orrs	r3, r1
 80008d6:	6013      	str	r3, [r2, #0]
		// Setting the bit as 1 enables the Interrupt by Un-masking
	}
	temp =0;
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
	// 2. Configure the Output Speed
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	789b      	ldrb	r3, [r3, #2]
 80008e0:	461a      	mov	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x11<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clearing the required bits
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	689a      	ldr	r2, [r3, #8]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	2311      	movs	r3, #17
 80008fc:	408b      	lsls	r3, r1
 80008fe:	43db      	mvns	r3, r3
 8000900:	4619      	mov	r1, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	400a      	ands	r2, r1
 8000908:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	6899      	ldr	r1, [r3, #8]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	68fa      	ldr	r2, [r7, #12]
 8000916:	430a      	orrs	r2, r1
 8000918:	609a      	str	r2, [r3, #8]
		temp =0;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
	// 3. Configure the PUPD Settings
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	78db      	ldrb	r3, [r3, #3]
 8000922:	461a      	mov	r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->PUPDR &= ~(0x11<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clearing the required bits
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	68da      	ldr	r2, [r3, #12]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	4619      	mov	r1, r3
 800093c:	2311      	movs	r3, #17
 800093e:	408b      	lsls	r3, r1
 8000940:	43db      	mvns	r3, r3
 8000942:	4619      	mov	r1, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	400a      	ands	r2, r1
 800094a:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	68d9      	ldr	r1, [r3, #12]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	430a      	orrs	r2, r1
 800095a:	60da      	str	r2, [r3, #12]
		temp =0;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
	// 4. Configure the OP Type
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOpType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	791b      	ldrb	r3, [r3, #4]
 8000964:	461a      	mov	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x11<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clearing the required bits
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	685a      	ldr	r2, [r3, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	4619      	mov	r1, r3
 800097c:	2311      	movs	r3, #17
 800097e:	408b      	lsls	r3, r1
 8000980:	43db      	mvns	r3, r3
 8000982:	4619      	mov	r1, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	400a      	ands	r2, r1
 800098a:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	6859      	ldr	r1, [r3, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	430a      	orrs	r2, r1
 800099a:	605a      	str	r2, [r3, #4]
		temp =0;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
	// 5. Configure the Alternate functionality
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	785b      	ldrb	r3, [r3, #1]
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d15d      	bne.n	8000a64 <GPIO_Init+0x330>
		{
			// Configure the Alt Function registers
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b07      	cmp	r3, #7
 80009ae:	d835      	bhi.n	8000a1c <GPIO_Init+0x2e8>
			{
				temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	795b      	ldrb	r3, [r3, #5]
 80009b4:	461a      	mov	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRL &= ~(0xF<<4*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clearing the required bits
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	6a1a      	ldr	r2, [r3, #32]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	210f      	movs	r1, #15
 80009d0:	fa01 f303 	lsl.w	r3, r1, r3
 80009d4:	43db      	mvns	r3, r3
 80009d6:	4619      	mov	r1, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	400a      	ands	r2, r1
 80009de:	621a      	str	r2, [r3, #32]
				pGPIOHandle->pGPIOx->AFRL |= temp;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	6a19      	ldr	r1, [r3, #32]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	430a      	orrs	r2, r1
 80009ee:	621a      	str	r2, [r3, #32]
				temp =0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRH &= ~(0xf<<4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber-8)); // Clearing the required bits
				pGPIOHandle->pGPIOx->AFRH |= temp;
				temp =0;
			}
		}
}
 80009f4:	e036      	b.n	8000a64 <GPIO_Init+0x330>
 80009f6:	bf00      	nop
 80009f8:	40013c00 	.word	0x40013c00
 80009fc:	40020000 	.word	0x40020000
 8000a00:	40020400 	.word	0x40020400
 8000a04:	40020800 	.word	0x40020800
 8000a08:	40020c00 	.word	0x40020c00
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40021c00 	.word	0x40021c00
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40013800 	.word	0x40013800
				temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode) << (4*((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)-(8))));
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	795b      	ldrb	r3, [r3, #5]
 8000a20:	461a      	mov	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	3b08      	subs	r3, #8
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFRH &= ~(0xf<<4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber-8)); // Clearing the required bits
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	3b08      	subs	r3, #8
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	210f      	movs	r1, #15
 8000a40:	fa01 f303 	lsl.w	r3, r1, r3
 8000a44:	43db      	mvns	r3, r3
 8000a46:	4619      	mov	r1, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	400a      	ands	r2, r1
 8000a4e:	625a      	str	r2, [r3, #36]	; 0x24
				pGPIOHandle->pGPIOx->AFRH |= temp;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	625a      	str	r2, [r3, #36]	; 0x24
				temp =0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <GPIO_ReadFromInputPin>:
	* @param[*pGPIOx]		: GPIO Port Base address
	* @param [PinNumber]	: Pin Number to be read
	* @return 				: Read Value from the Pin (0 or 1)
*/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber)&(0x00000001));
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	691a      	ldr	r2, [r3, #16]
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	73fb      	strb	r3, [r7, #15]
	return value;
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <I2C_GenerateStartCondition>:
{
	for(uint32_t i=0;i<1000;i++);
}
/* Function to generate a START Condition */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_START);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <I2C_ExecuteAddressPhase_Write>:
/* This Function used for Sending the Slave Adsress after Configuring the R/W Bit */
static void I2C_ExecuteAddressPhase_Write(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1; // Address is only 7bits (Slave Address + Read/Write bit)
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); // Clearing the LSB since it is Writing mode
 8000aca:	78fb      	ldrb	r3, [r7, #3]
 8000acc:	f023 0301 	bic.w	r3, r3, #1
 8000ad0:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000ad2:	78fa      	ldrb	r2, [r7, #3]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	611a      	str	r2, [r3, #16]
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <I2C_ExecuteAddressPhase_Read>:
static void I2C_ExecuteAddressPhase_Read(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1; // Address is only 7bits (Slave Address + Read/Write bit)
 8000af0:	78fb      	ldrb	r3, [r7, #3]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |=(1); // Setting the LSB since it is Reading mode
 8000af6:	78fb      	ldrb	r3, [r7, #3]
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000afe:	78fa      	ldrb	r2, [r7, #3]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	611a      	str	r2, [r3, #16]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <I2C_ClearADDRFlag>:
/* this Function is used for Clearing the ADDR Bit after it is set, by reading the SR1 and SR2 Registers  */
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	uint32_t dummy = pI2Cx->SR1; // Dummy reading
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	60fb      	str	r3, [r7, #12]
	dummy = pI2Cx->SR2; // Dummy Reading
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	60fb      	str	r3, [r7, #12]
	(void) dummy; // To avoid unused error warning
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <I2C_GenerateStopCondition>:
/* Function to Generate the Stop Condition*/
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_STOP);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	601a      	str	r2, [r3, #0]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <RCC_GetPCLK1Value>:
//void RCC_GetPLLOutputClock(void) {/* This is just a Dummy Implementation (Since this is not used in this course*/}
/* A Function to identify the APB Bus clock to set the FREQ Bitas*/
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint32_t RCC_GetPCLK1Value(void) // I2C Peripheral is Connected to APB1
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
	// before the Peripheral (Taken from the Clock tree given)
	// Here we need to look at the pre-scalar values of AHB Bus and APB Bus
	// 1. Finding the System Clock Source
	uint32_t pclk1,SystemClk;
	uint8_t clksrc,temp,ahbp,apb1p,apbp;
	clksrc = ((RCC->RCC_CFGR) & (0x3<<2));
 8000b56:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <RCC_GetPCLK1Value+0x94>)
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	f003 030c 	and.w	r3, r3, #12
 8000b60:	727b      	strb	r3, [r7, #9]
	if(clksrc == 0)
 8000b62:	7a7b      	ldrb	r3, [r7, #9]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <RCC_GetPCLK1Value+0x1e>
	{
		SystemClk = 16000000;
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <RCC_GetPCLK1Value+0x98>)
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	e004      	b.n	8000b78 <RCC_GetPCLK1Value+0x28>
	}else if(clksrc == 1)
 8000b6e:	7a7b      	ldrb	r3, [r7, #9]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d101      	bne.n	8000b78 <RCC_GetPCLK1Value+0x28>
	{
		SystemClk = 8000000;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <RCC_GetPCLK1Value+0x9c>)
 8000b76:	60fb      	str	r3, [r7, #12]
	{
		//SystemClk = RCC_GetPLLOutputClock();
	}

	// 2. Finding the Pre-scaler value of the AHBus
	temp = ((RCC->RCC_CFGR >>4) & (0xF));
 8000b78:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <RCC_GetPCLK1Value+0x94>)
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	091b      	lsrs	r3, r3, #4
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	f003 030f 	and.w	r3, r3, #15
 8000b84:	723b      	strb	r3, [r7, #8]
	if(temp<8)
 8000b86:	7a3b      	ldrb	r3, [r7, #8]
 8000b88:	2b07      	cmp	r3, #7
 8000b8a:	d802      	bhi.n	8000b92 <RCC_GetPCLK1Value+0x42>
	{
		ahbp = 1;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	72fb      	strb	r3, [r7, #11]
 8000b90:	e005      	b.n	8000b9e <RCC_GetPCLK1Value+0x4e>
	}
	else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000b92:	7a3b      	ldrb	r3, [r7, #8]
 8000b94:	3b08      	subs	r3, #8
 8000b96:	4a16      	ldr	r2, [pc, #88]	; (8000bf0 <RCC_GetPCLK1Value+0xa0>)
 8000b98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b9c:	72fb      	strb	r3, [r7, #11]
	}
	// 3. Finding the APB1 Pre-scaler
	temp = ((RCC->RCC_CFGR >>10)&(0x7));
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <RCC_GetPCLK1Value+0x94>)
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	0a9b      	lsrs	r3, r3, #10
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	723b      	strb	r3, [r7, #8]
	if(temp<4)
 8000bac:	7a3b      	ldrb	r3, [r7, #8]
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	d802      	bhi.n	8000bb8 <RCC_GetPCLK1Value+0x68>
	{
		apb1p = 1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	72bb      	strb	r3, [r7, #10]
 8000bb6:	e005      	b.n	8000bc4 <RCC_GetPCLK1Value+0x74>
		(void) apbp;
	}else
	{
		apb1p = AHB_PreScaler[temp-4];
 8000bb8:	7a3b      	ldrb	r3, [r7, #8]
 8000bba:	3b04      	subs	r3, #4
 8000bbc:	4a0c      	ldr	r2, [pc, #48]	; (8000bf0 <RCC_GetPCLK1Value+0xa0>)
 8000bbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bc2:	72bb      	strb	r3, [r7, #10]
	}
	pclk1 = (SystemClk/ahbp)/apb1p; // Return the exact clock frequency supplied (Say 16MHz)
 8000bc4:	7afb      	ldrb	r3, [r7, #11]
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bcc:	7abb      	ldrb	r3, [r7, #10]
 8000bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd2:	607b      	str	r3, [r7, #4]
	return pclk1;
 8000bd4:	687b      	ldr	r3, [r7, #4]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800
 8000be8:	00f42400 	.word	0x00f42400
 8000bec:	007a1200 	.word	0x007a1200
 8000bf0:	20000000 	.word	0x20000000

08000bf4 <I2C_PeriClockControl>:

/* To Configure the RCC to the peripheral required */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx,uint8_t EnOrDi)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d120      	bne.n	8000c48 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1) I2C1_PCLK_EN();
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a22      	ldr	r2, [pc, #136]	; (8000c94 <I2C_PeriClockControl+0xa0>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d106      	bne.n	8000c1c <I2C_PeriClockControl+0x28>
 8000c0e:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <I2C_PeriClockControl+0xa4>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a21      	ldr	r2, [pc, #132]	; (8000c98 <I2C_PeriClockControl+0xa4>)
 8000c14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
	{
		if(pI2Cx == I2C1) I2C1_PCLK_DI();
		else if(pI2Cx == I2C2) I2C2_PCLK_DI();
		else if(pI2Cx == I2C3) I2C3_PCLK_DI();
	}
}
 8000c1a:	e035      	b.n	8000c88 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2) I2C2_PCLK_EN();
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a1f      	ldr	r2, [pc, #124]	; (8000c9c <I2C_PeriClockControl+0xa8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d106      	bne.n	8000c32 <I2C_PeriClockControl+0x3e>
 8000c24:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <I2C_PeriClockControl+0xa4>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	4a1b      	ldr	r2, [pc, #108]	; (8000c98 <I2C_PeriClockControl+0xa4>)
 8000c2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c2e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c30:	e02a      	b.n	8000c88 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3) I2C3_PCLK_EN();
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a1a      	ldr	r2, [pc, #104]	; (8000ca0 <I2C_PeriClockControl+0xac>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d126      	bne.n	8000c88 <I2C_PeriClockControl+0x94>
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <I2C_PeriClockControl+0xa4>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a16      	ldr	r2, [pc, #88]	; (8000c98 <I2C_PeriClockControl+0xa4>)
 8000c40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c46:	e01f      	b.n	8000c88 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1) I2C1_PCLK_DI();
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <I2C_PeriClockControl+0xa0>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d106      	bne.n	8000c5e <I2C_PeriClockControl+0x6a>
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <I2C_PeriClockControl+0xa4>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <I2C_PeriClockControl+0xa4>)
 8000c56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000c5a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c5c:	e014      	b.n	8000c88 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2) I2C2_PCLK_DI();
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <I2C_PeriClockControl+0xa8>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d106      	bne.n	8000c74 <I2C_PeriClockControl+0x80>
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <I2C_PeriClockControl+0xa4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <I2C_PeriClockControl+0xa4>)
 8000c6c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c72:	e009      	b.n	8000c88 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3) I2C3_PCLK_DI();
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <I2C_PeriClockControl+0xac>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d105      	bne.n	8000c88 <I2C_PeriClockControl+0x94>
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <I2C_PeriClockControl+0xa4>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <I2C_PeriClockControl+0xa4>)
 8000c82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000c86:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	40005400 	.word	0x40005400
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40005800 	.word	0x40005800
 8000ca0:	40005c00 	.word	0x40005c00

08000ca4 <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	// Enable the Clock for I2Cx
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff9e 	bl	8000bf4 <I2C_PeriClockControl>
	uint32_t tempreg = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
	//tempreg |= (pI2CHandle->I2C_Config.I2C_ACKControl << 10); // See the possible values for the I2C_ACKControl
	//(pI2CHandle->pI2Cx->CR1) |= tempreg;
	//(pI2CHandle->pI2Cx->CR1) |= (pI2CHandle->I2C_Config.I2C_ACKControl << 10);
	// (2) Next step is to configure the FREQ bits that is based on the Peripheral Clock Frequency
	// We should find what is the Peripheral clock frequency and then configure the FREQ Bits
	tempreg = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
	uint32_t mytemp = RCC_GetPCLK1Value();
 8000cc0:	f7ff ff46 	bl	8000b50 <RCC_GetPCLK1Value>
 8000cc4:	6138      	str	r0, [r7, #16]
	tempreg |= (mytemp/1000000U); // Divided by 1 Mhz (Given in the Reference Manual for FREQ bits)
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	4a6a      	ldr	r2, [pc, #424]	; (8000e74 <I2C_Init+0x1d0>)
 8000cca:	fba2 2303 	umull	r2, r3, r2, r3
 8000cce:	0c9b      	lsrs	r3, r3, #18
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	617b      	str	r3, [r7, #20]
	pI2CHandle->pI2Cx->CR2 |= (tempreg&0x3f);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	6859      	ldr	r1, [r3, #4]
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	605a      	str	r2, [r3, #4]
	// (3) Configuring the slave address if our Board is behaving as a slave.
	// We should do this is Own Address Register (I2C_OAR)
	pI2CHandle->pI2Cx->OAR1 &= ~(1<<15); // Setting as 7 bit slave address mode
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cf8:	609a      	str	r2, [r3, #8]
	pI2CHandle->pI2Cx->OAR1 |= (1<<14); // Given in the Reference Manual that this bit should be always set to 1 by the software
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d08:	609a      	str	r2, [r3, #8]
	tempreg = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
	tempreg = pI2CHandle->I2C_Config.I2C_DeviceAddress;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7a1b      	ldrb	r3, [r3, #8]
 8000d12:	617b      	str	r3, [r7, #20]
	pI2CHandle->pI2Cx->OAR1 |= (tempreg<<1);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	6899      	ldr	r1, [r3, #8]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005a      	lsls	r2, r3, #1
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	430a      	orrs	r2, r1
 8000d24:	609a      	str	r2, [r3, #8]
	// (4) CCR Calculations
	uint16_t ccr_value = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	81fb      	strh	r3, [r7, #14]
	tempreg = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
	ccr_value = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	81fb      	strh	r3, [r7, #14]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	4a50      	ldr	r2, [pc, #320]	; (8000e78 <I2C_Init+0x1d4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d813      	bhi.n	8000d64 <I2C_Init+0xc0>
	{
		// Mode is Standard Mode
		tempreg &= ~(1<<15);
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d42:	617b      	str	r3, [r7, #20]
		// We need to create a 100 kHz SCL => 10usec = T(SCL)
		// T(pclk1) = 1/16MHz = 62.5nsec
		// T(high) = (CCR)(T(pclk1)) => T(high) = 50% Duty cycle = 10u(T(SCL))/2 => CCR = 80;
		ccr_value = RCC_GetPCLK1Value()/ (2*pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000d44:	f7ff ff04 	bl	8000b50 <RCC_GetPCLK1Value>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d54:	81fb      	strh	r3, [r7, #14]
		tempreg |= (ccr_value&0xfff);
 8000d56:	89fb      	ldrh	r3, [r7, #14]
 8000d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	e042      	b.n	8000dea <I2C_Init+0x146>
	}else
	{
		// Mode is Fast Mode
		tempreg |= (1<<15);
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d6a:	617b      	str	r3, [r7, #20]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	895b      	ldrh	r3, [r3, #10]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d119      	bne.n	8000da8 <I2C_Init+0x104>
		{
			tempreg &= ~(1<<14);
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d7a:	617b      	str	r3, [r7, #20]
			ccr_value = (RCC_GetPCLK1Value()) / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000d7c:	f7ff fee8 	bl	8000b50 <RCC_GetPCLK1Value>
 8000d80:	4601      	mov	r1, r0
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	4613      	mov	r3, r2
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	4413      	add	r3, r2
 8000d8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d90:	81fb      	strh	r3, [r7, #14]
			pI2CHandle->pI2Cx->CCR |= (tempreg|ccr_value); // 1000 0000 0000 0000
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	69d9      	ldr	r1, [r3, #28]
 8000d98:	89fa      	ldrh	r2, [r7, #14]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	431a      	orrs	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	430a      	orrs	r2, r1
 8000da4:	61da      	str	r2, [r3, #28]
 8000da6:	e020      	b.n	8000dea <I2C_Init+0x146>
		}
		else if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_16_9)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	895b      	ldrh	r3, [r3, #10]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d11c      	bne.n	8000dea <I2C_Init+0x146>
		{
			tempreg |= (1<<14);
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db6:	617b      	str	r3, [r7, #20]
			ccr_value = (RCC_GetPCLK1Value()) / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000db8:	f7ff feca 	bl	8000b50 <RCC_GetPCLK1Value>
 8000dbc:	4601      	mov	r1, r0
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	009a      	lsls	r2, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dd0:	81fb      	strh	r3, [r7, #14]
			pI2CHandle->pI2Cx->CCR |= (tempreg|(ccr_value&0xfff));
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	69d9      	ldr	r1, [r3, #28]
 8000dd8:	89fb      	ldrh	r3, [r7, #14]
 8000dda:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	431a      	orrs	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	430a      	orrs	r2, r1
 8000de8:	61da      	str	r2, [r3, #28]
		}
	}
	pI2CHandle->pI2Cx->CCR |= tempreg;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	69d9      	ldr	r1, [r3, #28]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	430a      	orrs	r2, r1
 8000df8:	61da      	str	r2, [r3, #28]
	// TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	4a1e      	ldr	r2, [pc, #120]	; (8000e78 <I2C_Init+0x1d4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d808      	bhi.n	8000e16 <I2C_Init+0x172>
	{
		// Mode is Standard Mode
		tempreg = ((RCC_GetPCLK1Value() * 1000000U)+1);
 8000e04:	f7ff fea4 	bl	8000b50 <RCC_GetPCLK1Value>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	4a1c      	ldr	r2, [pc, #112]	; (8000e7c <I2C_Init+0x1d8>)
 8000e0c:	fb02 f303 	mul.w	r3, r2, r3
 8000e10:	3301      	adds	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	e00d      	b.n	8000e32 <I2C_Init+0x18e>
	}else
	{
		// Mode is Fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300)/1000000000U)+1;
 8000e16:	f7ff fe9b 	bl	8000b50 <RCC_GetPCLK1Value>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e20:	fb02 f303 	mul.w	r3, r2, r3
 8000e24:	0a5b      	lsrs	r3, r3, #9
 8000e26:	4a16      	ldr	r2, [pc, #88]	; (8000e80 <I2C_Init+0x1dc>)
 8000e28:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2c:	09db      	lsrs	r3, r3, #7
 8000e2e:	3301      	adds	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
	}
	pI2CHandle->pI2Cx->TRISE |= (tempreg&0x3f);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6a19      	ldr	r1, [r3, #32]
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	430a      	orrs	r2, r1
 8000e44:	621a      	str	r2, [r3, #32]
	I2C_PeripheralControl(pI2CHandle->pI2Cx, ENABLE); // Enabling the PE Bit
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 f925 	bl	800109c <I2C_PeripheralControl>
	// (1) From the I2C_Config_t structure configuring for the "I2C_ACKControl"
	if(pI2CHandle->I2C_Config.I2C_ACKControl == 1)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	7a5b      	ldrb	r3, [r3, #9]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d107      	bne.n	8000e6a <I2C_Init+0x1c6>
	{
		(pI2CHandle->pI2Cx->CR1) |= (1<<10);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e68:	601a      	str	r2, [r3, #0]
	}
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	431bde83 	.word	0x431bde83
 8000e78:	000186a0 	.word	0x000186a0
 8000e7c:	000f4240 	.word	0x000f4240
 8000e80:	00044b83 	.word	0x00044b83

08000e84 <I2C_MasterSendData>:
	else if(pI2Cx == I2C2) I2C2_REG_RESET();
	else if(pI2Cx == I2C3) I2C3_REG_RESET();
}

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer,uint32_t Len,uint8_t SlaveAddr,uint8_t Sr)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	70fb      	strb	r3, [r7, #3]
	//   when BTF=1 SCl will be stretched (pulled to low)
	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
    //Note: Generating STOP, automatically clears the BTF
	/* 1  - Generate Start Condition */
	//(pI2CHandle->pI2Cx->CR1) |= (1<<I2C_CR1_START);
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fdfe 	bl	8000a98 <I2C_GenerateStartCondition>
	/* 2  - Check SB Flag Set to conform Start Generation*/
	//while(! ((pI2CHandle->pI2Cx->SR1 & I2C_FLAG_SB) == 1U));
	while( !(I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)));
 8000e9c:	bf00      	nop
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 f8e5 	bl	8001074 <I2C_GetFlagStatus>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0f6      	beq.n	8000e9e <I2C_MasterSendData+0x1a>
	/* 3  - Send the Address data */
	//((pI2CHandle->pI2Cx->DR)) |= SlaveAddr<<1;
	//((pI2CHandle->pI2Cx->DR)) &= ~(1U);
	I2C_ExecuteAddressPhase_Write(pI2CHandle->pI2Cx,SlaveAddr);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	78fa      	ldrb	r2, [r7, #3]
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fdfd 	bl	8000ab8 <I2C_ExecuteAddressPhase_Write>
	/* 4 */
	//uint8_t temp1 = I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR);
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)));
 8000ebe:	bf00      	nop
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f8d4 	bl	8001074 <I2C_GetFlagStatus>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0f6      	beq.n	8000ec0 <I2C_MasterSendData+0x3c>
	//while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
	/* 5 */
	//pI2CHandle->pI2Cx->SR1 &= ~(I2C_FLAG_ADDR); (This is Wrong) Since ADDR bit should be automatically cleared by reading the SR1 and SR2 bits
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fe1a 	bl	8000b10 <I2C_ClearADDRFlag>
	/* 6 */
	while(Len>0)
 8000edc:	e014      	b.n	8000f08 <I2C_MasterSendData+0x84>
	{
		while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE))); // Wait Until TXE is Set
 8000ede:	bf00      	nop
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2180      	movs	r1, #128	; 0x80
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f8c4 	bl	8001074 <I2C_GetFlagStatus>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0f6      	beq.n	8000ee0 <I2C_MasterSendData+0x5c>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	781a      	ldrb	r2, [r3, #0]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	3301      	adds	r3, #1
 8000f00:	60bb      	str	r3, [r7, #8]
		Len--;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
	while(Len>0)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1e7      	bne.n	8000ede <I2C_MasterSendData+0x5a>
		//small_delay();
	}
	/* 7 */
	//while(!((pI2CHandle->pI2Cx->SR1 & I2C_FLAG_TXE) == 1U));
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)));
 8000f0e:	bf00      	nop
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2180      	movs	r1, #128	; 0x80
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f8ac 	bl	8001074 <I2C_GetFlagStatus>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0f6      	beq.n	8000f10 <I2C_MasterSendData+0x8c>
	//while(!((pI2CHandle->pI2Cx->SR1 & I2C_FLAG_BTF) == 1U));
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF)));
 8000f22:	bf00      	nop
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2104      	movs	r1, #4
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f8a2 	bl	8001074 <I2C_GetFlagStatus>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f6      	beq.n	8000f24 <I2C_MasterSendData+0xa0>
	/* 8 */
	//pI2CHandle->pI2Cx->CR1 |= (1<<I2C_CR1_STOP);
	if(Sr == I2C_DISABLE_SR)
 8000f36:	7e3b      	ldrb	r3, [r7, #24]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d104      	bne.n	8000f46 <I2C_MasterSendData+0xc2>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fdf5 	bl	8000b30 <I2C_GenerateStopCondition>
}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <I2C_MasterReceiveData>:

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxbuffer,uint32_t Len,uint8_t SlaveAddr,uint8_t Sr)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	70fb      	strb	r3, [r7, #3]
	// 1. Generate The START Condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fd99 	bl	8000a98 <I2C_GenerateStartCondition>
	// 2. Confirm that Start generation is completed by checking the SB Flag in the SR1
	while( !(I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)));
 8000f66:	bf00      	nop
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f880 	bl	8001074 <I2C_GetFlagStatus>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0f6      	beq.n	8000f68 <I2C_MasterReceiveData+0x1a>
	// Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	// 3. Send the address of the slave with R/W bit set to R(1) (Total 8 Bits)
	I2C_ExecuteAddressPhase_Read(pI2CHandle->pI2Cx,SlaveAddr);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	78fa      	ldrb	r2, [r7, #3]
 8000f80:	4611      	mov	r1, r2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fdae 	bl	8000ae4 <I2C_ExecuteAddressPhase_Read>
	// 4. Wait until address phase is completed by checking the ADDR Flag in the SR1
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)));
 8000f88:	bf00      	nop
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2102      	movs	r1, #2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 f86f 	bl	8001074 <I2C_GetFlagStatus>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0f6      	beq.n	8000f8a <I2C_MasterReceiveData+0x3c>
	// 5. Check whether the length of the data is 1byte or more than 1byte
	if(Len == 1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d124      	bne.n	8000fec <I2C_MasterReceiveData+0x9e>
	{
		// Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 f890 	bl	80010ce <I2C_ManageAcking>
		// Check whether the Address phase is successful by checking the ADDR Bit.(Not Sure)
		// Now clear the ADDR Bit
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fdac 	bl	8000b10 <I2C_ClearADDRFlag>
		// Check whether the RXNE is Set
		while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)));
 8000fb8:	bf00      	nop
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2140      	movs	r1, #64	; 0x40
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 f857 	bl	8001074 <I2C_GetFlagStatus>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f6      	beq.n	8000fba <I2C_MasterReceiveData+0x6c>
		if(Sr == I2C_DISABLE_SR)
 8000fcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d104      	bne.n	8000fde <I2C_MasterReceiveData+0x90>
			// Generate Stop Condition
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fda9 	bl	8000b30 <I2C_GenerateStopCondition>
		// Read the Data Register
		*pRxbuffer = pI2CHandle->pI2Cx->DR;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	701a      	strb	r2, [r3, #0]
 8000fea:	e035      	b.n	8001058 <I2C_MasterReceiveData+0x10a>
	}
	else if(Len >1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d932      	bls.n	8001058 <I2C_MasterReceiveData+0x10a>
	{
		// Clear the ADDR Flag
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fd8a 	bl	8000b10 <I2C_ClearADDRFlag>
		// Read the data until the Len becomes zero
		for(uint32_t i=Len; i>0; i--)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	e027      	b.n	8001052 <I2C_MasterReceiveData+0x104>
		{
			// Wait until RXNE Set
			while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)));
 8001002:	bf00      	nop
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2140      	movs	r1, #64	; 0x40
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f832 	bl	8001074 <I2C_GetFlagStatus>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f6      	beq.n	8001004 <I2C_MasterReceiveData+0xb6>
			if(i==2)// If only last two bytes are remaining (refer notes for special case explanation)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d10e      	bne.n	800103a <I2C_MasterReceiveData+0xec>
			{
				// Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f853 	bl	80010ce <I2C_ManageAcking>
				if(Sr == I2C_DISABLE_SR)
 8001028:	f897 3020 	ldrb.w	r3, [r7, #32]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d104      	bne.n	800103a <I2C_MasterReceiveData+0xec>
					// Generate Stop Condition
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fd7b 	bl	8000b30 <I2C_GenerateStopCondition>
			}

			// Read the data from Data Register
			*pRxbuffer = pI2CHandle->pI2Cx->DR;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	701a      	strb	r2, [r3, #0]
			// Increment the Buffer address
			pRxbuffer++;
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	3301      	adds	r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
		for(uint32_t i=Len; i>0; i--)
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3b01      	subs	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1d4      	bne.n	8001002 <I2C_MasterReceiveData+0xb4>
		}
	}
	// Re-enable the Acking
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	7a5b      	ldrb	r3, [r3, #9]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d105      	bne.n	800106c <I2C_MasterReceiveData+0x11e>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2101      	movs	r1, #1
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f831 	bl	80010ce <I2C_ManageAcking>
	}
}
 800106c:	bf00      	nop
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <I2C_GetFlagStatus>:

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx,uint32_t FlagName)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	4013      	ands	r3, r2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <I2C_PeripheralControl>:
// Controlling the PE Bit
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx,uint8_t EnOrDi)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d103      	bne.n	80010b6 <I2C_PeripheralControl+0x1a>
	{
		pI2Cx->CR1 = (1<<I2C_CR1_PE);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2201      	movs	r2, #1
 80010b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1<<I2C_CR1_PE);
	}
}
 80010b4:	e005      	b.n	80010c2 <I2C_PeripheralControl+0x26>
		pI2Cx->CR1 &= ~(1<<I2C_CR1_PE);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f023 0201 	bic.w	r2, r3, #1
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	601a      	str	r2, [r3, #0]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <I2C_ManageAcking>:
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx,uint8_t EnorDi)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	460b      	mov	r3, r1
 80010d8:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80010da:	78fb      	ldrb	r3, [r7, #3]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d106      	bne.n	80010ee <I2C_ManageAcking+0x20>
	{
		// Enable the Acking
		pI2Cx->CR1 |= 1<<I2C_CR1_ACK;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	601a      	str	r2, [r3, #0]
	else if(EnorDi == DISABLE)
	{
		// Disable the Acking
		pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
	}
}
 80010ec:	e008      	b.n	8001100 <I2C_ManageAcking+0x32>
	else if(EnorDi == DISABLE)
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d105      	bne.n	8001100 <I2C_ManageAcking+0x32>
		pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	601a      	str	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <__errno>:
 800110c:	4b01      	ldr	r3, [pc, #4]	; (8001114 <__errno+0x8>)
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000010 	.word	0x20000010

08001118 <__libc_init_array>:
 8001118:	b570      	push	{r4, r5, r6, lr}
 800111a:	4d0d      	ldr	r5, [pc, #52]	; (8001150 <__libc_init_array+0x38>)
 800111c:	4c0d      	ldr	r4, [pc, #52]	; (8001154 <__libc_init_array+0x3c>)
 800111e:	1b64      	subs	r4, r4, r5
 8001120:	10a4      	asrs	r4, r4, #2
 8001122:	2600      	movs	r6, #0
 8001124:	42a6      	cmp	r6, r4
 8001126:	d109      	bne.n	800113c <__libc_init_array+0x24>
 8001128:	4d0b      	ldr	r5, [pc, #44]	; (8001158 <__libc_init_array+0x40>)
 800112a:	4c0c      	ldr	r4, [pc, #48]	; (800115c <__libc_init_array+0x44>)
 800112c:	f000 ffae 	bl	800208c <_init>
 8001130:	1b64      	subs	r4, r4, r5
 8001132:	10a4      	asrs	r4, r4, #2
 8001134:	2600      	movs	r6, #0
 8001136:	42a6      	cmp	r6, r4
 8001138:	d105      	bne.n	8001146 <__libc_init_array+0x2e>
 800113a:	bd70      	pop	{r4, r5, r6, pc}
 800113c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001140:	4798      	blx	r3
 8001142:	3601      	adds	r6, #1
 8001144:	e7ee      	b.n	8001124 <__libc_init_array+0xc>
 8001146:	f855 3b04 	ldr.w	r3, [r5], #4
 800114a:	4798      	blx	r3
 800114c:	3601      	adds	r6, #1
 800114e:	e7f2      	b.n	8001136 <__libc_init_array+0x1e>
 8001150:	0800215c 	.word	0x0800215c
 8001154:	0800215c 	.word	0x0800215c
 8001158:	0800215c 	.word	0x0800215c
 800115c:	08002160 	.word	0x08002160

08001160 <memset>:
 8001160:	4402      	add	r2, r0
 8001162:	4603      	mov	r3, r0
 8001164:	4293      	cmp	r3, r2
 8001166:	d100      	bne.n	800116a <memset+0xa>
 8001168:	4770      	bx	lr
 800116a:	f803 1b01 	strb.w	r1, [r3], #1
 800116e:	e7f9      	b.n	8001164 <memset+0x4>

08001170 <iprintf>:
 8001170:	b40f      	push	{r0, r1, r2, r3}
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <iprintf+0x2c>)
 8001174:	b513      	push	{r0, r1, r4, lr}
 8001176:	681c      	ldr	r4, [r3, #0]
 8001178:	b124      	cbz	r4, 8001184 <iprintf+0x14>
 800117a:	69a3      	ldr	r3, [r4, #24]
 800117c:	b913      	cbnz	r3, 8001184 <iprintf+0x14>
 800117e:	4620      	mov	r0, r4
 8001180:	f000 f866 	bl	8001250 <__sinit>
 8001184:	ab05      	add	r3, sp, #20
 8001186:	9a04      	ldr	r2, [sp, #16]
 8001188:	68a1      	ldr	r1, [r4, #8]
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	4620      	mov	r0, r4
 800118e:	f000 f9bd 	bl	800150c <_vfiprintf_r>
 8001192:	b002      	add	sp, #8
 8001194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001198:	b004      	add	sp, #16
 800119a:	4770      	bx	lr
 800119c:	20000010 	.word	0x20000010

080011a0 <std>:
 80011a0:	2300      	movs	r3, #0
 80011a2:	b510      	push	{r4, lr}
 80011a4:	4604      	mov	r4, r0
 80011a6:	e9c0 3300 	strd	r3, r3, [r0]
 80011aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80011ae:	6083      	str	r3, [r0, #8]
 80011b0:	8181      	strh	r1, [r0, #12]
 80011b2:	6643      	str	r3, [r0, #100]	; 0x64
 80011b4:	81c2      	strh	r2, [r0, #14]
 80011b6:	6183      	str	r3, [r0, #24]
 80011b8:	4619      	mov	r1, r3
 80011ba:	2208      	movs	r2, #8
 80011bc:	305c      	adds	r0, #92	; 0x5c
 80011be:	f7ff ffcf 	bl	8001160 <memset>
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <std+0x38>)
 80011c4:	6263      	str	r3, [r4, #36]	; 0x24
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <std+0x3c>)
 80011c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80011ca:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <std+0x40>)
 80011cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011ce:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <std+0x44>)
 80011d0:	6224      	str	r4, [r4, #32]
 80011d2:	6323      	str	r3, [r4, #48]	; 0x30
 80011d4:	bd10      	pop	{r4, pc}
 80011d6:	bf00      	nop
 80011d8:	08001ab5 	.word	0x08001ab5
 80011dc:	08001ad7 	.word	0x08001ad7
 80011e0:	08001b0f 	.word	0x08001b0f
 80011e4:	08001b33 	.word	0x08001b33

080011e8 <_cleanup_r>:
 80011e8:	4901      	ldr	r1, [pc, #4]	; (80011f0 <_cleanup_r+0x8>)
 80011ea:	f000 b8af 	b.w	800134c <_fwalk_reent>
 80011ee:	bf00      	nop
 80011f0:	08001e0d 	.word	0x08001e0d

080011f4 <__sfmoreglue>:
 80011f4:	b570      	push	{r4, r5, r6, lr}
 80011f6:	2268      	movs	r2, #104	; 0x68
 80011f8:	1e4d      	subs	r5, r1, #1
 80011fa:	4355      	muls	r5, r2
 80011fc:	460e      	mov	r6, r1
 80011fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001202:	f000 f8e5 	bl	80013d0 <_malloc_r>
 8001206:	4604      	mov	r4, r0
 8001208:	b140      	cbz	r0, 800121c <__sfmoreglue+0x28>
 800120a:	2100      	movs	r1, #0
 800120c:	e9c0 1600 	strd	r1, r6, [r0]
 8001210:	300c      	adds	r0, #12
 8001212:	60a0      	str	r0, [r4, #8]
 8001214:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001218:	f7ff ffa2 	bl	8001160 <memset>
 800121c:	4620      	mov	r0, r4
 800121e:	bd70      	pop	{r4, r5, r6, pc}

08001220 <__sfp_lock_acquire>:
 8001220:	4801      	ldr	r0, [pc, #4]	; (8001228 <__sfp_lock_acquire+0x8>)
 8001222:	f000 b8b3 	b.w	800138c <__retarget_lock_acquire_recursive>
 8001226:	bf00      	nop
 8001228:	200000dd 	.word	0x200000dd

0800122c <__sfp_lock_release>:
 800122c:	4801      	ldr	r0, [pc, #4]	; (8001234 <__sfp_lock_release+0x8>)
 800122e:	f000 b8ae 	b.w	800138e <__retarget_lock_release_recursive>
 8001232:	bf00      	nop
 8001234:	200000dd 	.word	0x200000dd

08001238 <__sinit_lock_acquire>:
 8001238:	4801      	ldr	r0, [pc, #4]	; (8001240 <__sinit_lock_acquire+0x8>)
 800123a:	f000 b8a7 	b.w	800138c <__retarget_lock_acquire_recursive>
 800123e:	bf00      	nop
 8001240:	200000de 	.word	0x200000de

08001244 <__sinit_lock_release>:
 8001244:	4801      	ldr	r0, [pc, #4]	; (800124c <__sinit_lock_release+0x8>)
 8001246:	f000 b8a2 	b.w	800138e <__retarget_lock_release_recursive>
 800124a:	bf00      	nop
 800124c:	200000de 	.word	0x200000de

08001250 <__sinit>:
 8001250:	b510      	push	{r4, lr}
 8001252:	4604      	mov	r4, r0
 8001254:	f7ff fff0 	bl	8001238 <__sinit_lock_acquire>
 8001258:	69a3      	ldr	r3, [r4, #24]
 800125a:	b11b      	cbz	r3, 8001264 <__sinit+0x14>
 800125c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001260:	f7ff bff0 	b.w	8001244 <__sinit_lock_release>
 8001264:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001268:	6523      	str	r3, [r4, #80]	; 0x50
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <__sinit+0x68>)
 800126c:	4a13      	ldr	r2, [pc, #76]	; (80012bc <__sinit+0x6c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	62a2      	str	r2, [r4, #40]	; 0x28
 8001272:	42a3      	cmp	r3, r4
 8001274:	bf04      	itt	eq
 8001276:	2301      	moveq	r3, #1
 8001278:	61a3      	streq	r3, [r4, #24]
 800127a:	4620      	mov	r0, r4
 800127c:	f000 f820 	bl	80012c0 <__sfp>
 8001280:	6060      	str	r0, [r4, #4]
 8001282:	4620      	mov	r0, r4
 8001284:	f000 f81c 	bl	80012c0 <__sfp>
 8001288:	60a0      	str	r0, [r4, #8]
 800128a:	4620      	mov	r0, r4
 800128c:	f000 f818 	bl	80012c0 <__sfp>
 8001290:	2200      	movs	r2, #0
 8001292:	60e0      	str	r0, [r4, #12]
 8001294:	2104      	movs	r1, #4
 8001296:	6860      	ldr	r0, [r4, #4]
 8001298:	f7ff ff82 	bl	80011a0 <std>
 800129c:	68a0      	ldr	r0, [r4, #8]
 800129e:	2201      	movs	r2, #1
 80012a0:	2109      	movs	r1, #9
 80012a2:	f7ff ff7d 	bl	80011a0 <std>
 80012a6:	68e0      	ldr	r0, [r4, #12]
 80012a8:	2202      	movs	r2, #2
 80012aa:	2112      	movs	r1, #18
 80012ac:	f7ff ff78 	bl	80011a0 <std>
 80012b0:	2301      	movs	r3, #1
 80012b2:	61a3      	str	r3, [r4, #24]
 80012b4:	e7d2      	b.n	800125c <__sinit+0xc>
 80012b6:	bf00      	nop
 80012b8:	080020c4 	.word	0x080020c4
 80012bc:	080011e9 	.word	0x080011e9

080012c0 <__sfp>:
 80012c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c2:	4607      	mov	r7, r0
 80012c4:	f7ff ffac 	bl	8001220 <__sfp_lock_acquire>
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <__sfp+0x84>)
 80012ca:	681e      	ldr	r6, [r3, #0]
 80012cc:	69b3      	ldr	r3, [r6, #24]
 80012ce:	b913      	cbnz	r3, 80012d6 <__sfp+0x16>
 80012d0:	4630      	mov	r0, r6
 80012d2:	f7ff ffbd 	bl	8001250 <__sinit>
 80012d6:	3648      	adds	r6, #72	; 0x48
 80012d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80012dc:	3b01      	subs	r3, #1
 80012de:	d503      	bpl.n	80012e8 <__sfp+0x28>
 80012e0:	6833      	ldr	r3, [r6, #0]
 80012e2:	b30b      	cbz	r3, 8001328 <__sfp+0x68>
 80012e4:	6836      	ldr	r6, [r6, #0]
 80012e6:	e7f7      	b.n	80012d8 <__sfp+0x18>
 80012e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80012ec:	b9d5      	cbnz	r5, 8001324 <__sfp+0x64>
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <__sfp+0x88>)
 80012f0:	60e3      	str	r3, [r4, #12]
 80012f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80012f6:	6665      	str	r5, [r4, #100]	; 0x64
 80012f8:	f000 f847 	bl	800138a <__retarget_lock_init_recursive>
 80012fc:	f7ff ff96 	bl	800122c <__sfp_lock_release>
 8001300:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001304:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001308:	6025      	str	r5, [r4, #0]
 800130a:	61a5      	str	r5, [r4, #24]
 800130c:	2208      	movs	r2, #8
 800130e:	4629      	mov	r1, r5
 8001310:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001314:	f7ff ff24 	bl	8001160 <memset>
 8001318:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800131c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001320:	4620      	mov	r0, r4
 8001322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001324:	3468      	adds	r4, #104	; 0x68
 8001326:	e7d9      	b.n	80012dc <__sfp+0x1c>
 8001328:	2104      	movs	r1, #4
 800132a:	4638      	mov	r0, r7
 800132c:	f7ff ff62 	bl	80011f4 <__sfmoreglue>
 8001330:	4604      	mov	r4, r0
 8001332:	6030      	str	r0, [r6, #0]
 8001334:	2800      	cmp	r0, #0
 8001336:	d1d5      	bne.n	80012e4 <__sfp+0x24>
 8001338:	f7ff ff78 	bl	800122c <__sfp_lock_release>
 800133c:	230c      	movs	r3, #12
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	e7ee      	b.n	8001320 <__sfp+0x60>
 8001342:	bf00      	nop
 8001344:	080020c4 	.word	0x080020c4
 8001348:	ffff0001 	.word	0xffff0001

0800134c <_fwalk_reent>:
 800134c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001350:	4606      	mov	r6, r0
 8001352:	4688      	mov	r8, r1
 8001354:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001358:	2700      	movs	r7, #0
 800135a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800135e:	f1b9 0901 	subs.w	r9, r9, #1
 8001362:	d505      	bpl.n	8001370 <_fwalk_reent+0x24>
 8001364:	6824      	ldr	r4, [r4, #0]
 8001366:	2c00      	cmp	r4, #0
 8001368:	d1f7      	bne.n	800135a <_fwalk_reent+0xe>
 800136a:	4638      	mov	r0, r7
 800136c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001370:	89ab      	ldrh	r3, [r5, #12]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d907      	bls.n	8001386 <_fwalk_reent+0x3a>
 8001376:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800137a:	3301      	adds	r3, #1
 800137c:	d003      	beq.n	8001386 <_fwalk_reent+0x3a>
 800137e:	4629      	mov	r1, r5
 8001380:	4630      	mov	r0, r6
 8001382:	47c0      	blx	r8
 8001384:	4307      	orrs	r7, r0
 8001386:	3568      	adds	r5, #104	; 0x68
 8001388:	e7e9      	b.n	800135e <_fwalk_reent+0x12>

0800138a <__retarget_lock_init_recursive>:
 800138a:	4770      	bx	lr

0800138c <__retarget_lock_acquire_recursive>:
 800138c:	4770      	bx	lr

0800138e <__retarget_lock_release_recursive>:
 800138e:	4770      	bx	lr

08001390 <sbrk_aligned>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	4e0e      	ldr	r6, [pc, #56]	; (80013cc <sbrk_aligned+0x3c>)
 8001394:	460c      	mov	r4, r1
 8001396:	6831      	ldr	r1, [r6, #0]
 8001398:	4605      	mov	r5, r0
 800139a:	b911      	cbnz	r1, 80013a2 <sbrk_aligned+0x12>
 800139c:	f000 fb7a 	bl	8001a94 <_sbrk_r>
 80013a0:	6030      	str	r0, [r6, #0]
 80013a2:	4621      	mov	r1, r4
 80013a4:	4628      	mov	r0, r5
 80013a6:	f000 fb75 	bl	8001a94 <_sbrk_r>
 80013aa:	1c43      	adds	r3, r0, #1
 80013ac:	d00a      	beq.n	80013c4 <sbrk_aligned+0x34>
 80013ae:	1cc4      	adds	r4, r0, #3
 80013b0:	f024 0403 	bic.w	r4, r4, #3
 80013b4:	42a0      	cmp	r0, r4
 80013b6:	d007      	beq.n	80013c8 <sbrk_aligned+0x38>
 80013b8:	1a21      	subs	r1, r4, r0
 80013ba:	4628      	mov	r0, r5
 80013bc:	f000 fb6a 	bl	8001a94 <_sbrk_r>
 80013c0:	3001      	adds	r0, #1
 80013c2:	d101      	bne.n	80013c8 <sbrk_aligned+0x38>
 80013c4:	f04f 34ff 	mov.w	r4, #4294967295
 80013c8:	4620      	mov	r0, r4
 80013ca:	bd70      	pop	{r4, r5, r6, pc}
 80013cc:	200000e4 	.word	0x200000e4

080013d0 <_malloc_r>:
 80013d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013d4:	1ccd      	adds	r5, r1, #3
 80013d6:	f025 0503 	bic.w	r5, r5, #3
 80013da:	3508      	adds	r5, #8
 80013dc:	2d0c      	cmp	r5, #12
 80013de:	bf38      	it	cc
 80013e0:	250c      	movcc	r5, #12
 80013e2:	2d00      	cmp	r5, #0
 80013e4:	4607      	mov	r7, r0
 80013e6:	db01      	blt.n	80013ec <_malloc_r+0x1c>
 80013e8:	42a9      	cmp	r1, r5
 80013ea:	d905      	bls.n	80013f8 <_malloc_r+0x28>
 80013ec:	230c      	movs	r3, #12
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	2600      	movs	r6, #0
 80013f2:	4630      	mov	r0, r6
 80013f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013f8:	4e2e      	ldr	r6, [pc, #184]	; (80014b4 <_malloc_r+0xe4>)
 80013fa:	f000 fdbb 	bl	8001f74 <__malloc_lock>
 80013fe:	6833      	ldr	r3, [r6, #0]
 8001400:	461c      	mov	r4, r3
 8001402:	bb34      	cbnz	r4, 8001452 <_malloc_r+0x82>
 8001404:	4629      	mov	r1, r5
 8001406:	4638      	mov	r0, r7
 8001408:	f7ff ffc2 	bl	8001390 <sbrk_aligned>
 800140c:	1c43      	adds	r3, r0, #1
 800140e:	4604      	mov	r4, r0
 8001410:	d14d      	bne.n	80014ae <_malloc_r+0xde>
 8001412:	6834      	ldr	r4, [r6, #0]
 8001414:	4626      	mov	r6, r4
 8001416:	2e00      	cmp	r6, #0
 8001418:	d140      	bne.n	800149c <_malloc_r+0xcc>
 800141a:	6823      	ldr	r3, [r4, #0]
 800141c:	4631      	mov	r1, r6
 800141e:	4638      	mov	r0, r7
 8001420:	eb04 0803 	add.w	r8, r4, r3
 8001424:	f000 fb36 	bl	8001a94 <_sbrk_r>
 8001428:	4580      	cmp	r8, r0
 800142a:	d13a      	bne.n	80014a2 <_malloc_r+0xd2>
 800142c:	6821      	ldr	r1, [r4, #0]
 800142e:	3503      	adds	r5, #3
 8001430:	1a6d      	subs	r5, r5, r1
 8001432:	f025 0503 	bic.w	r5, r5, #3
 8001436:	3508      	adds	r5, #8
 8001438:	2d0c      	cmp	r5, #12
 800143a:	bf38      	it	cc
 800143c:	250c      	movcc	r5, #12
 800143e:	4629      	mov	r1, r5
 8001440:	4638      	mov	r0, r7
 8001442:	f7ff ffa5 	bl	8001390 <sbrk_aligned>
 8001446:	3001      	adds	r0, #1
 8001448:	d02b      	beq.n	80014a2 <_malloc_r+0xd2>
 800144a:	6823      	ldr	r3, [r4, #0]
 800144c:	442b      	add	r3, r5
 800144e:	6023      	str	r3, [r4, #0]
 8001450:	e00e      	b.n	8001470 <_malloc_r+0xa0>
 8001452:	6822      	ldr	r2, [r4, #0]
 8001454:	1b52      	subs	r2, r2, r5
 8001456:	d41e      	bmi.n	8001496 <_malloc_r+0xc6>
 8001458:	2a0b      	cmp	r2, #11
 800145a:	d916      	bls.n	800148a <_malloc_r+0xba>
 800145c:	1961      	adds	r1, r4, r5
 800145e:	42a3      	cmp	r3, r4
 8001460:	6025      	str	r5, [r4, #0]
 8001462:	bf18      	it	ne
 8001464:	6059      	strne	r1, [r3, #4]
 8001466:	6863      	ldr	r3, [r4, #4]
 8001468:	bf08      	it	eq
 800146a:	6031      	streq	r1, [r6, #0]
 800146c:	5162      	str	r2, [r4, r5]
 800146e:	604b      	str	r3, [r1, #4]
 8001470:	4638      	mov	r0, r7
 8001472:	f104 060b 	add.w	r6, r4, #11
 8001476:	f000 fd83 	bl	8001f80 <__malloc_unlock>
 800147a:	f026 0607 	bic.w	r6, r6, #7
 800147e:	1d23      	adds	r3, r4, #4
 8001480:	1af2      	subs	r2, r6, r3
 8001482:	d0b6      	beq.n	80013f2 <_malloc_r+0x22>
 8001484:	1b9b      	subs	r3, r3, r6
 8001486:	50a3      	str	r3, [r4, r2]
 8001488:	e7b3      	b.n	80013f2 <_malloc_r+0x22>
 800148a:	6862      	ldr	r2, [r4, #4]
 800148c:	42a3      	cmp	r3, r4
 800148e:	bf0c      	ite	eq
 8001490:	6032      	streq	r2, [r6, #0]
 8001492:	605a      	strne	r2, [r3, #4]
 8001494:	e7ec      	b.n	8001470 <_malloc_r+0xa0>
 8001496:	4623      	mov	r3, r4
 8001498:	6864      	ldr	r4, [r4, #4]
 800149a:	e7b2      	b.n	8001402 <_malloc_r+0x32>
 800149c:	4634      	mov	r4, r6
 800149e:	6876      	ldr	r6, [r6, #4]
 80014a0:	e7b9      	b.n	8001416 <_malloc_r+0x46>
 80014a2:	230c      	movs	r3, #12
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	4638      	mov	r0, r7
 80014a8:	f000 fd6a 	bl	8001f80 <__malloc_unlock>
 80014ac:	e7a1      	b.n	80013f2 <_malloc_r+0x22>
 80014ae:	6025      	str	r5, [r4, #0]
 80014b0:	e7de      	b.n	8001470 <_malloc_r+0xa0>
 80014b2:	bf00      	nop
 80014b4:	200000e0 	.word	0x200000e0

080014b8 <__sfputc_r>:
 80014b8:	6893      	ldr	r3, [r2, #8]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	b410      	push	{r4}
 80014c0:	6093      	str	r3, [r2, #8]
 80014c2:	da08      	bge.n	80014d6 <__sfputc_r+0x1e>
 80014c4:	6994      	ldr	r4, [r2, #24]
 80014c6:	42a3      	cmp	r3, r4
 80014c8:	db01      	blt.n	80014ce <__sfputc_r+0x16>
 80014ca:	290a      	cmp	r1, #10
 80014cc:	d103      	bne.n	80014d6 <__sfputc_r+0x1e>
 80014ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014d2:	f000 bb33 	b.w	8001b3c <__swbuf_r>
 80014d6:	6813      	ldr	r3, [r2, #0]
 80014d8:	1c58      	adds	r0, r3, #1
 80014da:	6010      	str	r0, [r2, #0]
 80014dc:	7019      	strb	r1, [r3, #0]
 80014de:	4608      	mov	r0, r1
 80014e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <__sfputs_r>:
 80014e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014e8:	4606      	mov	r6, r0
 80014ea:	460f      	mov	r7, r1
 80014ec:	4614      	mov	r4, r2
 80014ee:	18d5      	adds	r5, r2, r3
 80014f0:	42ac      	cmp	r4, r5
 80014f2:	d101      	bne.n	80014f8 <__sfputs_r+0x12>
 80014f4:	2000      	movs	r0, #0
 80014f6:	e007      	b.n	8001508 <__sfputs_r+0x22>
 80014f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014fc:	463a      	mov	r2, r7
 80014fe:	4630      	mov	r0, r6
 8001500:	f7ff ffda 	bl	80014b8 <__sfputc_r>
 8001504:	1c43      	adds	r3, r0, #1
 8001506:	d1f3      	bne.n	80014f0 <__sfputs_r+0xa>
 8001508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800150c <_vfiprintf_r>:
 800150c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001510:	460d      	mov	r5, r1
 8001512:	b09d      	sub	sp, #116	; 0x74
 8001514:	4614      	mov	r4, r2
 8001516:	4698      	mov	r8, r3
 8001518:	4606      	mov	r6, r0
 800151a:	b118      	cbz	r0, 8001524 <_vfiprintf_r+0x18>
 800151c:	6983      	ldr	r3, [r0, #24]
 800151e:	b90b      	cbnz	r3, 8001524 <_vfiprintf_r+0x18>
 8001520:	f7ff fe96 	bl	8001250 <__sinit>
 8001524:	4b89      	ldr	r3, [pc, #548]	; (800174c <_vfiprintf_r+0x240>)
 8001526:	429d      	cmp	r5, r3
 8001528:	d11b      	bne.n	8001562 <_vfiprintf_r+0x56>
 800152a:	6875      	ldr	r5, [r6, #4]
 800152c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800152e:	07d9      	lsls	r1, r3, #31
 8001530:	d405      	bmi.n	800153e <_vfiprintf_r+0x32>
 8001532:	89ab      	ldrh	r3, [r5, #12]
 8001534:	059a      	lsls	r2, r3, #22
 8001536:	d402      	bmi.n	800153e <_vfiprintf_r+0x32>
 8001538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800153a:	f7ff ff27 	bl	800138c <__retarget_lock_acquire_recursive>
 800153e:	89ab      	ldrh	r3, [r5, #12]
 8001540:	071b      	lsls	r3, r3, #28
 8001542:	d501      	bpl.n	8001548 <_vfiprintf_r+0x3c>
 8001544:	692b      	ldr	r3, [r5, #16]
 8001546:	b9eb      	cbnz	r3, 8001584 <_vfiprintf_r+0x78>
 8001548:	4629      	mov	r1, r5
 800154a:	4630      	mov	r0, r6
 800154c:	f000 fb5a 	bl	8001c04 <__swsetup_r>
 8001550:	b1c0      	cbz	r0, 8001584 <_vfiprintf_r+0x78>
 8001552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001554:	07dc      	lsls	r4, r3, #31
 8001556:	d50e      	bpl.n	8001576 <_vfiprintf_r+0x6a>
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	b01d      	add	sp, #116	; 0x74
 800155e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001562:	4b7b      	ldr	r3, [pc, #492]	; (8001750 <_vfiprintf_r+0x244>)
 8001564:	429d      	cmp	r5, r3
 8001566:	d101      	bne.n	800156c <_vfiprintf_r+0x60>
 8001568:	68b5      	ldr	r5, [r6, #8]
 800156a:	e7df      	b.n	800152c <_vfiprintf_r+0x20>
 800156c:	4b79      	ldr	r3, [pc, #484]	; (8001754 <_vfiprintf_r+0x248>)
 800156e:	429d      	cmp	r5, r3
 8001570:	bf08      	it	eq
 8001572:	68f5      	ldreq	r5, [r6, #12]
 8001574:	e7da      	b.n	800152c <_vfiprintf_r+0x20>
 8001576:	89ab      	ldrh	r3, [r5, #12]
 8001578:	0598      	lsls	r0, r3, #22
 800157a:	d4ed      	bmi.n	8001558 <_vfiprintf_r+0x4c>
 800157c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800157e:	f7ff ff06 	bl	800138e <__retarget_lock_release_recursive>
 8001582:	e7e9      	b.n	8001558 <_vfiprintf_r+0x4c>
 8001584:	2300      	movs	r3, #0
 8001586:	9309      	str	r3, [sp, #36]	; 0x24
 8001588:	2320      	movs	r3, #32
 800158a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800158e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001592:	2330      	movs	r3, #48	; 0x30
 8001594:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001758 <_vfiprintf_r+0x24c>
 8001598:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800159c:	f04f 0901 	mov.w	r9, #1
 80015a0:	4623      	mov	r3, r4
 80015a2:	469a      	mov	sl, r3
 80015a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80015a8:	b10a      	cbz	r2, 80015ae <_vfiprintf_r+0xa2>
 80015aa:	2a25      	cmp	r2, #37	; 0x25
 80015ac:	d1f9      	bne.n	80015a2 <_vfiprintf_r+0x96>
 80015ae:	ebba 0b04 	subs.w	fp, sl, r4
 80015b2:	d00b      	beq.n	80015cc <_vfiprintf_r+0xc0>
 80015b4:	465b      	mov	r3, fp
 80015b6:	4622      	mov	r2, r4
 80015b8:	4629      	mov	r1, r5
 80015ba:	4630      	mov	r0, r6
 80015bc:	f7ff ff93 	bl	80014e6 <__sfputs_r>
 80015c0:	3001      	adds	r0, #1
 80015c2:	f000 80aa 	beq.w	800171a <_vfiprintf_r+0x20e>
 80015c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80015c8:	445a      	add	r2, fp
 80015ca:	9209      	str	r2, [sp, #36]	; 0x24
 80015cc:	f89a 3000 	ldrb.w	r3, [sl]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80a2 	beq.w	800171a <_vfiprintf_r+0x20e>
 80015d6:	2300      	movs	r3, #0
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80015e0:	f10a 0a01 	add.w	sl, sl, #1
 80015e4:	9304      	str	r3, [sp, #16]
 80015e6:	9307      	str	r3, [sp, #28]
 80015e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80015ec:	931a      	str	r3, [sp, #104]	; 0x68
 80015ee:	4654      	mov	r4, sl
 80015f0:	2205      	movs	r2, #5
 80015f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015f6:	4858      	ldr	r0, [pc, #352]	; (8001758 <_vfiprintf_r+0x24c>)
 80015f8:	f7fe fdf2 	bl	80001e0 <memchr>
 80015fc:	9a04      	ldr	r2, [sp, #16]
 80015fe:	b9d8      	cbnz	r0, 8001638 <_vfiprintf_r+0x12c>
 8001600:	06d1      	lsls	r1, r2, #27
 8001602:	bf44      	itt	mi
 8001604:	2320      	movmi	r3, #32
 8001606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800160a:	0713      	lsls	r3, r2, #28
 800160c:	bf44      	itt	mi
 800160e:	232b      	movmi	r3, #43	; 0x2b
 8001610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001614:	f89a 3000 	ldrb.w	r3, [sl]
 8001618:	2b2a      	cmp	r3, #42	; 0x2a
 800161a:	d015      	beq.n	8001648 <_vfiprintf_r+0x13c>
 800161c:	9a07      	ldr	r2, [sp, #28]
 800161e:	4654      	mov	r4, sl
 8001620:	2000      	movs	r0, #0
 8001622:	f04f 0c0a 	mov.w	ip, #10
 8001626:	4621      	mov	r1, r4
 8001628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800162c:	3b30      	subs	r3, #48	; 0x30
 800162e:	2b09      	cmp	r3, #9
 8001630:	d94e      	bls.n	80016d0 <_vfiprintf_r+0x1c4>
 8001632:	b1b0      	cbz	r0, 8001662 <_vfiprintf_r+0x156>
 8001634:	9207      	str	r2, [sp, #28]
 8001636:	e014      	b.n	8001662 <_vfiprintf_r+0x156>
 8001638:	eba0 0308 	sub.w	r3, r0, r8
 800163c:	fa09 f303 	lsl.w	r3, r9, r3
 8001640:	4313      	orrs	r3, r2
 8001642:	9304      	str	r3, [sp, #16]
 8001644:	46a2      	mov	sl, r4
 8001646:	e7d2      	b.n	80015ee <_vfiprintf_r+0xe2>
 8001648:	9b03      	ldr	r3, [sp, #12]
 800164a:	1d19      	adds	r1, r3, #4
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	9103      	str	r1, [sp, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	bfbb      	ittet	lt
 8001654:	425b      	neglt	r3, r3
 8001656:	f042 0202 	orrlt.w	r2, r2, #2
 800165a:	9307      	strge	r3, [sp, #28]
 800165c:	9307      	strlt	r3, [sp, #28]
 800165e:	bfb8      	it	lt
 8001660:	9204      	strlt	r2, [sp, #16]
 8001662:	7823      	ldrb	r3, [r4, #0]
 8001664:	2b2e      	cmp	r3, #46	; 0x2e
 8001666:	d10c      	bne.n	8001682 <_vfiprintf_r+0x176>
 8001668:	7863      	ldrb	r3, [r4, #1]
 800166a:	2b2a      	cmp	r3, #42	; 0x2a
 800166c:	d135      	bne.n	80016da <_vfiprintf_r+0x1ce>
 800166e:	9b03      	ldr	r3, [sp, #12]
 8001670:	1d1a      	adds	r2, r3, #4
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	9203      	str	r2, [sp, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	bfb8      	it	lt
 800167a:	f04f 33ff 	movlt.w	r3, #4294967295
 800167e:	3402      	adds	r4, #2
 8001680:	9305      	str	r3, [sp, #20]
 8001682:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001768 <_vfiprintf_r+0x25c>
 8001686:	7821      	ldrb	r1, [r4, #0]
 8001688:	2203      	movs	r2, #3
 800168a:	4650      	mov	r0, sl
 800168c:	f7fe fda8 	bl	80001e0 <memchr>
 8001690:	b140      	cbz	r0, 80016a4 <_vfiprintf_r+0x198>
 8001692:	2340      	movs	r3, #64	; 0x40
 8001694:	eba0 000a 	sub.w	r0, r0, sl
 8001698:	fa03 f000 	lsl.w	r0, r3, r0
 800169c:	9b04      	ldr	r3, [sp, #16]
 800169e:	4303      	orrs	r3, r0
 80016a0:	3401      	adds	r4, #1
 80016a2:	9304      	str	r3, [sp, #16]
 80016a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016a8:	482c      	ldr	r0, [pc, #176]	; (800175c <_vfiprintf_r+0x250>)
 80016aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80016ae:	2206      	movs	r2, #6
 80016b0:	f7fe fd96 	bl	80001e0 <memchr>
 80016b4:	2800      	cmp	r0, #0
 80016b6:	d03f      	beq.n	8001738 <_vfiprintf_r+0x22c>
 80016b8:	4b29      	ldr	r3, [pc, #164]	; (8001760 <_vfiprintf_r+0x254>)
 80016ba:	bb1b      	cbnz	r3, 8001704 <_vfiprintf_r+0x1f8>
 80016bc:	9b03      	ldr	r3, [sp, #12]
 80016be:	3307      	adds	r3, #7
 80016c0:	f023 0307 	bic.w	r3, r3, #7
 80016c4:	3308      	adds	r3, #8
 80016c6:	9303      	str	r3, [sp, #12]
 80016c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016ca:	443b      	add	r3, r7
 80016cc:	9309      	str	r3, [sp, #36]	; 0x24
 80016ce:	e767      	b.n	80015a0 <_vfiprintf_r+0x94>
 80016d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80016d4:	460c      	mov	r4, r1
 80016d6:	2001      	movs	r0, #1
 80016d8:	e7a5      	b.n	8001626 <_vfiprintf_r+0x11a>
 80016da:	2300      	movs	r3, #0
 80016dc:	3401      	adds	r4, #1
 80016de:	9305      	str	r3, [sp, #20]
 80016e0:	4619      	mov	r1, r3
 80016e2:	f04f 0c0a 	mov.w	ip, #10
 80016e6:	4620      	mov	r0, r4
 80016e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80016ec:	3a30      	subs	r2, #48	; 0x30
 80016ee:	2a09      	cmp	r2, #9
 80016f0:	d903      	bls.n	80016fa <_vfiprintf_r+0x1ee>
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0c5      	beq.n	8001682 <_vfiprintf_r+0x176>
 80016f6:	9105      	str	r1, [sp, #20]
 80016f8:	e7c3      	b.n	8001682 <_vfiprintf_r+0x176>
 80016fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80016fe:	4604      	mov	r4, r0
 8001700:	2301      	movs	r3, #1
 8001702:	e7f0      	b.n	80016e6 <_vfiprintf_r+0x1da>
 8001704:	ab03      	add	r3, sp, #12
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	462a      	mov	r2, r5
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <_vfiprintf_r+0x258>)
 800170c:	a904      	add	r1, sp, #16
 800170e:	4630      	mov	r0, r6
 8001710:	f3af 8000 	nop.w
 8001714:	4607      	mov	r7, r0
 8001716:	1c78      	adds	r0, r7, #1
 8001718:	d1d6      	bne.n	80016c8 <_vfiprintf_r+0x1bc>
 800171a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800171c:	07d9      	lsls	r1, r3, #31
 800171e:	d405      	bmi.n	800172c <_vfiprintf_r+0x220>
 8001720:	89ab      	ldrh	r3, [r5, #12]
 8001722:	059a      	lsls	r2, r3, #22
 8001724:	d402      	bmi.n	800172c <_vfiprintf_r+0x220>
 8001726:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001728:	f7ff fe31 	bl	800138e <__retarget_lock_release_recursive>
 800172c:	89ab      	ldrh	r3, [r5, #12]
 800172e:	065b      	lsls	r3, r3, #25
 8001730:	f53f af12 	bmi.w	8001558 <_vfiprintf_r+0x4c>
 8001734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001736:	e711      	b.n	800155c <_vfiprintf_r+0x50>
 8001738:	ab03      	add	r3, sp, #12
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	462a      	mov	r2, r5
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <_vfiprintf_r+0x258>)
 8001740:	a904      	add	r1, sp, #16
 8001742:	4630      	mov	r0, r6
 8001744:	f000 f880 	bl	8001848 <_printf_i>
 8001748:	e7e4      	b.n	8001714 <_vfiprintf_r+0x208>
 800174a:	bf00      	nop
 800174c:	080020e8 	.word	0x080020e8
 8001750:	08002108 	.word	0x08002108
 8001754:	080020c8 	.word	0x080020c8
 8001758:	08002128 	.word	0x08002128
 800175c:	08002132 	.word	0x08002132
 8001760:	00000000 	.word	0x00000000
 8001764:	080014e7 	.word	0x080014e7
 8001768:	0800212e 	.word	0x0800212e

0800176c <_printf_common>:
 800176c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001770:	4616      	mov	r6, r2
 8001772:	4699      	mov	r9, r3
 8001774:	688a      	ldr	r2, [r1, #8]
 8001776:	690b      	ldr	r3, [r1, #16]
 8001778:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800177c:	4293      	cmp	r3, r2
 800177e:	bfb8      	it	lt
 8001780:	4613      	movlt	r3, r2
 8001782:	6033      	str	r3, [r6, #0]
 8001784:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001788:	4607      	mov	r7, r0
 800178a:	460c      	mov	r4, r1
 800178c:	b10a      	cbz	r2, 8001792 <_printf_common+0x26>
 800178e:	3301      	adds	r3, #1
 8001790:	6033      	str	r3, [r6, #0]
 8001792:	6823      	ldr	r3, [r4, #0]
 8001794:	0699      	lsls	r1, r3, #26
 8001796:	bf42      	ittt	mi
 8001798:	6833      	ldrmi	r3, [r6, #0]
 800179a:	3302      	addmi	r3, #2
 800179c:	6033      	strmi	r3, [r6, #0]
 800179e:	6825      	ldr	r5, [r4, #0]
 80017a0:	f015 0506 	ands.w	r5, r5, #6
 80017a4:	d106      	bne.n	80017b4 <_printf_common+0x48>
 80017a6:	f104 0a19 	add.w	sl, r4, #25
 80017aa:	68e3      	ldr	r3, [r4, #12]
 80017ac:	6832      	ldr	r2, [r6, #0]
 80017ae:	1a9b      	subs	r3, r3, r2
 80017b0:	42ab      	cmp	r3, r5
 80017b2:	dc26      	bgt.n	8001802 <_printf_common+0x96>
 80017b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80017b8:	1e13      	subs	r3, r2, #0
 80017ba:	6822      	ldr	r2, [r4, #0]
 80017bc:	bf18      	it	ne
 80017be:	2301      	movne	r3, #1
 80017c0:	0692      	lsls	r2, r2, #26
 80017c2:	d42b      	bmi.n	800181c <_printf_common+0xb0>
 80017c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80017c8:	4649      	mov	r1, r9
 80017ca:	4638      	mov	r0, r7
 80017cc:	47c0      	blx	r8
 80017ce:	3001      	adds	r0, #1
 80017d0:	d01e      	beq.n	8001810 <_printf_common+0xa4>
 80017d2:	6823      	ldr	r3, [r4, #0]
 80017d4:	68e5      	ldr	r5, [r4, #12]
 80017d6:	6832      	ldr	r2, [r6, #0]
 80017d8:	f003 0306 	and.w	r3, r3, #6
 80017dc:	2b04      	cmp	r3, #4
 80017de:	bf08      	it	eq
 80017e0:	1aad      	subeq	r5, r5, r2
 80017e2:	68a3      	ldr	r3, [r4, #8]
 80017e4:	6922      	ldr	r2, [r4, #16]
 80017e6:	bf0c      	ite	eq
 80017e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80017ec:	2500      	movne	r5, #0
 80017ee:	4293      	cmp	r3, r2
 80017f0:	bfc4      	itt	gt
 80017f2:	1a9b      	subgt	r3, r3, r2
 80017f4:	18ed      	addgt	r5, r5, r3
 80017f6:	2600      	movs	r6, #0
 80017f8:	341a      	adds	r4, #26
 80017fa:	42b5      	cmp	r5, r6
 80017fc:	d11a      	bne.n	8001834 <_printf_common+0xc8>
 80017fe:	2000      	movs	r0, #0
 8001800:	e008      	b.n	8001814 <_printf_common+0xa8>
 8001802:	2301      	movs	r3, #1
 8001804:	4652      	mov	r2, sl
 8001806:	4649      	mov	r1, r9
 8001808:	4638      	mov	r0, r7
 800180a:	47c0      	blx	r8
 800180c:	3001      	adds	r0, #1
 800180e:	d103      	bne.n	8001818 <_printf_common+0xac>
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001818:	3501      	adds	r5, #1
 800181a:	e7c6      	b.n	80017aa <_printf_common+0x3e>
 800181c:	18e1      	adds	r1, r4, r3
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	2030      	movs	r0, #48	; 0x30
 8001822:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001826:	4422      	add	r2, r4
 8001828:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800182c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001830:	3302      	adds	r3, #2
 8001832:	e7c7      	b.n	80017c4 <_printf_common+0x58>
 8001834:	2301      	movs	r3, #1
 8001836:	4622      	mov	r2, r4
 8001838:	4649      	mov	r1, r9
 800183a:	4638      	mov	r0, r7
 800183c:	47c0      	blx	r8
 800183e:	3001      	adds	r0, #1
 8001840:	d0e6      	beq.n	8001810 <_printf_common+0xa4>
 8001842:	3601      	adds	r6, #1
 8001844:	e7d9      	b.n	80017fa <_printf_common+0x8e>
	...

08001848 <_printf_i>:
 8001848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800184c:	7e0f      	ldrb	r7, [r1, #24]
 800184e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001850:	2f78      	cmp	r7, #120	; 0x78
 8001852:	4691      	mov	r9, r2
 8001854:	4680      	mov	r8, r0
 8001856:	460c      	mov	r4, r1
 8001858:	469a      	mov	sl, r3
 800185a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800185e:	d807      	bhi.n	8001870 <_printf_i+0x28>
 8001860:	2f62      	cmp	r7, #98	; 0x62
 8001862:	d80a      	bhi.n	800187a <_printf_i+0x32>
 8001864:	2f00      	cmp	r7, #0
 8001866:	f000 80d8 	beq.w	8001a1a <_printf_i+0x1d2>
 800186a:	2f58      	cmp	r7, #88	; 0x58
 800186c:	f000 80a3 	beq.w	80019b6 <_printf_i+0x16e>
 8001870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001874:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001878:	e03a      	b.n	80018f0 <_printf_i+0xa8>
 800187a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800187e:	2b15      	cmp	r3, #21
 8001880:	d8f6      	bhi.n	8001870 <_printf_i+0x28>
 8001882:	a101      	add	r1, pc, #4	; (adr r1, 8001888 <_printf_i+0x40>)
 8001884:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001888:	080018e1 	.word	0x080018e1
 800188c:	080018f5 	.word	0x080018f5
 8001890:	08001871 	.word	0x08001871
 8001894:	08001871 	.word	0x08001871
 8001898:	08001871 	.word	0x08001871
 800189c:	08001871 	.word	0x08001871
 80018a0:	080018f5 	.word	0x080018f5
 80018a4:	08001871 	.word	0x08001871
 80018a8:	08001871 	.word	0x08001871
 80018ac:	08001871 	.word	0x08001871
 80018b0:	08001871 	.word	0x08001871
 80018b4:	08001a01 	.word	0x08001a01
 80018b8:	08001925 	.word	0x08001925
 80018bc:	080019e3 	.word	0x080019e3
 80018c0:	08001871 	.word	0x08001871
 80018c4:	08001871 	.word	0x08001871
 80018c8:	08001a23 	.word	0x08001a23
 80018cc:	08001871 	.word	0x08001871
 80018d0:	08001925 	.word	0x08001925
 80018d4:	08001871 	.word	0x08001871
 80018d8:	08001871 	.word	0x08001871
 80018dc:	080019eb 	.word	0x080019eb
 80018e0:	682b      	ldr	r3, [r5, #0]
 80018e2:	1d1a      	adds	r2, r3, #4
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	602a      	str	r2, [r5, #0]
 80018e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80018ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0a3      	b.n	8001a3c <_printf_i+0x1f4>
 80018f4:	6820      	ldr	r0, [r4, #0]
 80018f6:	6829      	ldr	r1, [r5, #0]
 80018f8:	0606      	lsls	r6, r0, #24
 80018fa:	f101 0304 	add.w	r3, r1, #4
 80018fe:	d50a      	bpl.n	8001916 <_printf_i+0xce>
 8001900:	680e      	ldr	r6, [r1, #0]
 8001902:	602b      	str	r3, [r5, #0]
 8001904:	2e00      	cmp	r6, #0
 8001906:	da03      	bge.n	8001910 <_printf_i+0xc8>
 8001908:	232d      	movs	r3, #45	; 0x2d
 800190a:	4276      	negs	r6, r6
 800190c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001910:	485e      	ldr	r0, [pc, #376]	; (8001a8c <_printf_i+0x244>)
 8001912:	230a      	movs	r3, #10
 8001914:	e019      	b.n	800194a <_printf_i+0x102>
 8001916:	680e      	ldr	r6, [r1, #0]
 8001918:	602b      	str	r3, [r5, #0]
 800191a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800191e:	bf18      	it	ne
 8001920:	b236      	sxthne	r6, r6
 8001922:	e7ef      	b.n	8001904 <_printf_i+0xbc>
 8001924:	682b      	ldr	r3, [r5, #0]
 8001926:	6820      	ldr	r0, [r4, #0]
 8001928:	1d19      	adds	r1, r3, #4
 800192a:	6029      	str	r1, [r5, #0]
 800192c:	0601      	lsls	r1, r0, #24
 800192e:	d501      	bpl.n	8001934 <_printf_i+0xec>
 8001930:	681e      	ldr	r6, [r3, #0]
 8001932:	e002      	b.n	800193a <_printf_i+0xf2>
 8001934:	0646      	lsls	r6, r0, #25
 8001936:	d5fb      	bpl.n	8001930 <_printf_i+0xe8>
 8001938:	881e      	ldrh	r6, [r3, #0]
 800193a:	4854      	ldr	r0, [pc, #336]	; (8001a8c <_printf_i+0x244>)
 800193c:	2f6f      	cmp	r7, #111	; 0x6f
 800193e:	bf0c      	ite	eq
 8001940:	2308      	moveq	r3, #8
 8001942:	230a      	movne	r3, #10
 8001944:	2100      	movs	r1, #0
 8001946:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800194a:	6865      	ldr	r5, [r4, #4]
 800194c:	60a5      	str	r5, [r4, #8]
 800194e:	2d00      	cmp	r5, #0
 8001950:	bfa2      	ittt	ge
 8001952:	6821      	ldrge	r1, [r4, #0]
 8001954:	f021 0104 	bicge.w	r1, r1, #4
 8001958:	6021      	strge	r1, [r4, #0]
 800195a:	b90e      	cbnz	r6, 8001960 <_printf_i+0x118>
 800195c:	2d00      	cmp	r5, #0
 800195e:	d04d      	beq.n	80019fc <_printf_i+0x1b4>
 8001960:	4615      	mov	r5, r2
 8001962:	fbb6 f1f3 	udiv	r1, r6, r3
 8001966:	fb03 6711 	mls	r7, r3, r1, r6
 800196a:	5dc7      	ldrb	r7, [r0, r7]
 800196c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001970:	4637      	mov	r7, r6
 8001972:	42bb      	cmp	r3, r7
 8001974:	460e      	mov	r6, r1
 8001976:	d9f4      	bls.n	8001962 <_printf_i+0x11a>
 8001978:	2b08      	cmp	r3, #8
 800197a:	d10b      	bne.n	8001994 <_printf_i+0x14c>
 800197c:	6823      	ldr	r3, [r4, #0]
 800197e:	07de      	lsls	r6, r3, #31
 8001980:	d508      	bpl.n	8001994 <_printf_i+0x14c>
 8001982:	6923      	ldr	r3, [r4, #16]
 8001984:	6861      	ldr	r1, [r4, #4]
 8001986:	4299      	cmp	r1, r3
 8001988:	bfde      	ittt	le
 800198a:	2330      	movle	r3, #48	; 0x30
 800198c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001990:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001994:	1b52      	subs	r2, r2, r5
 8001996:	6122      	str	r2, [r4, #16]
 8001998:	f8cd a000 	str.w	sl, [sp]
 800199c:	464b      	mov	r3, r9
 800199e:	aa03      	add	r2, sp, #12
 80019a0:	4621      	mov	r1, r4
 80019a2:	4640      	mov	r0, r8
 80019a4:	f7ff fee2 	bl	800176c <_printf_common>
 80019a8:	3001      	adds	r0, #1
 80019aa:	d14c      	bne.n	8001a46 <_printf_i+0x1fe>
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295
 80019b0:	b004      	add	sp, #16
 80019b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019b6:	4835      	ldr	r0, [pc, #212]	; (8001a8c <_printf_i+0x244>)
 80019b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80019bc:	6829      	ldr	r1, [r5, #0]
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80019c4:	6029      	str	r1, [r5, #0]
 80019c6:	061d      	lsls	r5, r3, #24
 80019c8:	d514      	bpl.n	80019f4 <_printf_i+0x1ac>
 80019ca:	07df      	lsls	r7, r3, #31
 80019cc:	bf44      	itt	mi
 80019ce:	f043 0320 	orrmi.w	r3, r3, #32
 80019d2:	6023      	strmi	r3, [r4, #0]
 80019d4:	b91e      	cbnz	r6, 80019de <_printf_i+0x196>
 80019d6:	6823      	ldr	r3, [r4, #0]
 80019d8:	f023 0320 	bic.w	r3, r3, #32
 80019dc:	6023      	str	r3, [r4, #0]
 80019de:	2310      	movs	r3, #16
 80019e0:	e7b0      	b.n	8001944 <_printf_i+0xfc>
 80019e2:	6823      	ldr	r3, [r4, #0]
 80019e4:	f043 0320 	orr.w	r3, r3, #32
 80019e8:	6023      	str	r3, [r4, #0]
 80019ea:	2378      	movs	r3, #120	; 0x78
 80019ec:	4828      	ldr	r0, [pc, #160]	; (8001a90 <_printf_i+0x248>)
 80019ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80019f2:	e7e3      	b.n	80019bc <_printf_i+0x174>
 80019f4:	0659      	lsls	r1, r3, #25
 80019f6:	bf48      	it	mi
 80019f8:	b2b6      	uxthmi	r6, r6
 80019fa:	e7e6      	b.n	80019ca <_printf_i+0x182>
 80019fc:	4615      	mov	r5, r2
 80019fe:	e7bb      	b.n	8001978 <_printf_i+0x130>
 8001a00:	682b      	ldr	r3, [r5, #0]
 8001a02:	6826      	ldr	r6, [r4, #0]
 8001a04:	6961      	ldr	r1, [r4, #20]
 8001a06:	1d18      	adds	r0, r3, #4
 8001a08:	6028      	str	r0, [r5, #0]
 8001a0a:	0635      	lsls	r5, r6, #24
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	d501      	bpl.n	8001a14 <_printf_i+0x1cc>
 8001a10:	6019      	str	r1, [r3, #0]
 8001a12:	e002      	b.n	8001a1a <_printf_i+0x1d2>
 8001a14:	0670      	lsls	r0, r6, #25
 8001a16:	d5fb      	bpl.n	8001a10 <_printf_i+0x1c8>
 8001a18:	8019      	strh	r1, [r3, #0]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	6123      	str	r3, [r4, #16]
 8001a1e:	4615      	mov	r5, r2
 8001a20:	e7ba      	b.n	8001998 <_printf_i+0x150>
 8001a22:	682b      	ldr	r3, [r5, #0]
 8001a24:	1d1a      	adds	r2, r3, #4
 8001a26:	602a      	str	r2, [r5, #0]
 8001a28:	681d      	ldr	r5, [r3, #0]
 8001a2a:	6862      	ldr	r2, [r4, #4]
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4628      	mov	r0, r5
 8001a30:	f7fe fbd6 	bl	80001e0 <memchr>
 8001a34:	b108      	cbz	r0, 8001a3a <_printf_i+0x1f2>
 8001a36:	1b40      	subs	r0, r0, r5
 8001a38:	6060      	str	r0, [r4, #4]
 8001a3a:	6863      	ldr	r3, [r4, #4]
 8001a3c:	6123      	str	r3, [r4, #16]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a44:	e7a8      	b.n	8001998 <_printf_i+0x150>
 8001a46:	6923      	ldr	r3, [r4, #16]
 8001a48:	462a      	mov	r2, r5
 8001a4a:	4649      	mov	r1, r9
 8001a4c:	4640      	mov	r0, r8
 8001a4e:	47d0      	blx	sl
 8001a50:	3001      	adds	r0, #1
 8001a52:	d0ab      	beq.n	80019ac <_printf_i+0x164>
 8001a54:	6823      	ldr	r3, [r4, #0]
 8001a56:	079b      	lsls	r3, r3, #30
 8001a58:	d413      	bmi.n	8001a82 <_printf_i+0x23a>
 8001a5a:	68e0      	ldr	r0, [r4, #12]
 8001a5c:	9b03      	ldr	r3, [sp, #12]
 8001a5e:	4298      	cmp	r0, r3
 8001a60:	bfb8      	it	lt
 8001a62:	4618      	movlt	r0, r3
 8001a64:	e7a4      	b.n	80019b0 <_printf_i+0x168>
 8001a66:	2301      	movs	r3, #1
 8001a68:	4632      	mov	r2, r6
 8001a6a:	4649      	mov	r1, r9
 8001a6c:	4640      	mov	r0, r8
 8001a6e:	47d0      	blx	sl
 8001a70:	3001      	adds	r0, #1
 8001a72:	d09b      	beq.n	80019ac <_printf_i+0x164>
 8001a74:	3501      	adds	r5, #1
 8001a76:	68e3      	ldr	r3, [r4, #12]
 8001a78:	9903      	ldr	r1, [sp, #12]
 8001a7a:	1a5b      	subs	r3, r3, r1
 8001a7c:	42ab      	cmp	r3, r5
 8001a7e:	dcf2      	bgt.n	8001a66 <_printf_i+0x21e>
 8001a80:	e7eb      	b.n	8001a5a <_printf_i+0x212>
 8001a82:	2500      	movs	r5, #0
 8001a84:	f104 0619 	add.w	r6, r4, #25
 8001a88:	e7f5      	b.n	8001a76 <_printf_i+0x22e>
 8001a8a:	bf00      	nop
 8001a8c:	08002139 	.word	0x08002139
 8001a90:	0800214a 	.word	0x0800214a

08001a94 <_sbrk_r>:
 8001a94:	b538      	push	{r3, r4, r5, lr}
 8001a96:	4d06      	ldr	r5, [pc, #24]	; (8001ab0 <_sbrk_r+0x1c>)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	4608      	mov	r0, r1
 8001a9e:	602b      	str	r3, [r5, #0]
 8001aa0:	f7fe fd48 	bl	8000534 <_sbrk>
 8001aa4:	1c43      	adds	r3, r0, #1
 8001aa6:	d102      	bne.n	8001aae <_sbrk_r+0x1a>
 8001aa8:	682b      	ldr	r3, [r5, #0]
 8001aaa:	b103      	cbz	r3, 8001aae <_sbrk_r+0x1a>
 8001aac:	6023      	str	r3, [r4, #0]
 8001aae:	bd38      	pop	{r3, r4, r5, pc}
 8001ab0:	200000e8 	.word	0x200000e8

08001ab4 <__sread>:
 8001ab4:	b510      	push	{r4, lr}
 8001ab6:	460c      	mov	r4, r1
 8001ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001abc:	f000 fab2 	bl	8002024 <_read_r>
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	bfab      	itete	ge
 8001ac4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001ac6:	89a3      	ldrhlt	r3, [r4, #12]
 8001ac8:	181b      	addge	r3, r3, r0
 8001aca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001ace:	bfac      	ite	ge
 8001ad0:	6563      	strge	r3, [r4, #84]	; 0x54
 8001ad2:	81a3      	strhlt	r3, [r4, #12]
 8001ad4:	bd10      	pop	{r4, pc}

08001ad6 <__swrite>:
 8001ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ada:	461f      	mov	r7, r3
 8001adc:	898b      	ldrh	r3, [r1, #12]
 8001ade:	05db      	lsls	r3, r3, #23
 8001ae0:	4605      	mov	r5, r0
 8001ae2:	460c      	mov	r4, r1
 8001ae4:	4616      	mov	r6, r2
 8001ae6:	d505      	bpl.n	8001af4 <__swrite+0x1e>
 8001ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001aec:	2302      	movs	r3, #2
 8001aee:	2200      	movs	r2, #0
 8001af0:	f000 f9c8 	bl	8001e84 <_lseek_r>
 8001af4:	89a3      	ldrh	r3, [r4, #12]
 8001af6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001afa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001afe:	81a3      	strh	r3, [r4, #12]
 8001b00:	4632      	mov	r2, r6
 8001b02:	463b      	mov	r3, r7
 8001b04:	4628      	mov	r0, r5
 8001b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b0a:	f000 b869 	b.w	8001be0 <_write_r>

08001b0e <__sseek>:
 8001b0e:	b510      	push	{r4, lr}
 8001b10:	460c      	mov	r4, r1
 8001b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b16:	f000 f9b5 	bl	8001e84 <_lseek_r>
 8001b1a:	1c43      	adds	r3, r0, #1
 8001b1c:	89a3      	ldrh	r3, [r4, #12]
 8001b1e:	bf15      	itete	ne
 8001b20:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b2a:	81a3      	strheq	r3, [r4, #12]
 8001b2c:	bf18      	it	ne
 8001b2e:	81a3      	strhne	r3, [r4, #12]
 8001b30:	bd10      	pop	{r4, pc}

08001b32 <__sclose>:
 8001b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b36:	f000 b8d3 	b.w	8001ce0 <_close_r>
	...

08001b3c <__swbuf_r>:
 8001b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b3e:	460e      	mov	r6, r1
 8001b40:	4614      	mov	r4, r2
 8001b42:	4605      	mov	r5, r0
 8001b44:	b118      	cbz	r0, 8001b4e <__swbuf_r+0x12>
 8001b46:	6983      	ldr	r3, [r0, #24]
 8001b48:	b90b      	cbnz	r3, 8001b4e <__swbuf_r+0x12>
 8001b4a:	f7ff fb81 	bl	8001250 <__sinit>
 8001b4e:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <__swbuf_r+0x98>)
 8001b50:	429c      	cmp	r4, r3
 8001b52:	d12b      	bne.n	8001bac <__swbuf_r+0x70>
 8001b54:	686c      	ldr	r4, [r5, #4]
 8001b56:	69a3      	ldr	r3, [r4, #24]
 8001b58:	60a3      	str	r3, [r4, #8]
 8001b5a:	89a3      	ldrh	r3, [r4, #12]
 8001b5c:	071a      	lsls	r2, r3, #28
 8001b5e:	d52f      	bpl.n	8001bc0 <__swbuf_r+0x84>
 8001b60:	6923      	ldr	r3, [r4, #16]
 8001b62:	b36b      	cbz	r3, 8001bc0 <__swbuf_r+0x84>
 8001b64:	6923      	ldr	r3, [r4, #16]
 8001b66:	6820      	ldr	r0, [r4, #0]
 8001b68:	1ac0      	subs	r0, r0, r3
 8001b6a:	6963      	ldr	r3, [r4, #20]
 8001b6c:	b2f6      	uxtb	r6, r6
 8001b6e:	4283      	cmp	r3, r0
 8001b70:	4637      	mov	r7, r6
 8001b72:	dc04      	bgt.n	8001b7e <__swbuf_r+0x42>
 8001b74:	4621      	mov	r1, r4
 8001b76:	4628      	mov	r0, r5
 8001b78:	f000 f948 	bl	8001e0c <_fflush_r>
 8001b7c:	bb30      	cbnz	r0, 8001bcc <__swbuf_r+0x90>
 8001b7e:	68a3      	ldr	r3, [r4, #8]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	60a3      	str	r3, [r4, #8]
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	6022      	str	r2, [r4, #0]
 8001b8a:	701e      	strb	r6, [r3, #0]
 8001b8c:	6963      	ldr	r3, [r4, #20]
 8001b8e:	3001      	adds	r0, #1
 8001b90:	4283      	cmp	r3, r0
 8001b92:	d004      	beq.n	8001b9e <__swbuf_r+0x62>
 8001b94:	89a3      	ldrh	r3, [r4, #12]
 8001b96:	07db      	lsls	r3, r3, #31
 8001b98:	d506      	bpl.n	8001ba8 <__swbuf_r+0x6c>
 8001b9a:	2e0a      	cmp	r6, #10
 8001b9c:	d104      	bne.n	8001ba8 <__swbuf_r+0x6c>
 8001b9e:	4621      	mov	r1, r4
 8001ba0:	4628      	mov	r0, r5
 8001ba2:	f000 f933 	bl	8001e0c <_fflush_r>
 8001ba6:	b988      	cbnz	r0, 8001bcc <__swbuf_r+0x90>
 8001ba8:	4638      	mov	r0, r7
 8001baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <__swbuf_r+0x9c>)
 8001bae:	429c      	cmp	r4, r3
 8001bb0:	d101      	bne.n	8001bb6 <__swbuf_r+0x7a>
 8001bb2:	68ac      	ldr	r4, [r5, #8]
 8001bb4:	e7cf      	b.n	8001b56 <__swbuf_r+0x1a>
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <__swbuf_r+0xa0>)
 8001bb8:	429c      	cmp	r4, r3
 8001bba:	bf08      	it	eq
 8001bbc:	68ec      	ldreq	r4, [r5, #12]
 8001bbe:	e7ca      	b.n	8001b56 <__swbuf_r+0x1a>
 8001bc0:	4621      	mov	r1, r4
 8001bc2:	4628      	mov	r0, r5
 8001bc4:	f000 f81e 	bl	8001c04 <__swsetup_r>
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	d0cb      	beq.n	8001b64 <__swbuf_r+0x28>
 8001bcc:	f04f 37ff 	mov.w	r7, #4294967295
 8001bd0:	e7ea      	b.n	8001ba8 <__swbuf_r+0x6c>
 8001bd2:	bf00      	nop
 8001bd4:	080020e8 	.word	0x080020e8
 8001bd8:	08002108 	.word	0x08002108
 8001bdc:	080020c8 	.word	0x080020c8

08001be0 <_write_r>:
 8001be0:	b538      	push	{r3, r4, r5, lr}
 8001be2:	4d07      	ldr	r5, [pc, #28]	; (8001c00 <_write_r+0x20>)
 8001be4:	4604      	mov	r4, r0
 8001be6:	4608      	mov	r0, r1
 8001be8:	4611      	mov	r1, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	602a      	str	r2, [r5, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	f7fe fc50 	bl	8000494 <_write>
 8001bf4:	1c43      	adds	r3, r0, #1
 8001bf6:	d102      	bne.n	8001bfe <_write_r+0x1e>
 8001bf8:	682b      	ldr	r3, [r5, #0]
 8001bfa:	b103      	cbz	r3, 8001bfe <_write_r+0x1e>
 8001bfc:	6023      	str	r3, [r4, #0]
 8001bfe:	bd38      	pop	{r3, r4, r5, pc}
 8001c00:	200000e8 	.word	0x200000e8

08001c04 <__swsetup_r>:
 8001c04:	4b32      	ldr	r3, [pc, #200]	; (8001cd0 <__swsetup_r+0xcc>)
 8001c06:	b570      	push	{r4, r5, r6, lr}
 8001c08:	681d      	ldr	r5, [r3, #0]
 8001c0a:	4606      	mov	r6, r0
 8001c0c:	460c      	mov	r4, r1
 8001c0e:	b125      	cbz	r5, 8001c1a <__swsetup_r+0x16>
 8001c10:	69ab      	ldr	r3, [r5, #24]
 8001c12:	b913      	cbnz	r3, 8001c1a <__swsetup_r+0x16>
 8001c14:	4628      	mov	r0, r5
 8001c16:	f7ff fb1b 	bl	8001250 <__sinit>
 8001c1a:	4b2e      	ldr	r3, [pc, #184]	; (8001cd4 <__swsetup_r+0xd0>)
 8001c1c:	429c      	cmp	r4, r3
 8001c1e:	d10f      	bne.n	8001c40 <__swsetup_r+0x3c>
 8001c20:	686c      	ldr	r4, [r5, #4]
 8001c22:	89a3      	ldrh	r3, [r4, #12]
 8001c24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c28:	0719      	lsls	r1, r3, #28
 8001c2a:	d42c      	bmi.n	8001c86 <__swsetup_r+0x82>
 8001c2c:	06dd      	lsls	r5, r3, #27
 8001c2e:	d411      	bmi.n	8001c54 <__swsetup_r+0x50>
 8001c30:	2309      	movs	r3, #9
 8001c32:	6033      	str	r3, [r6, #0]
 8001c34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c38:	81a3      	strh	r3, [r4, #12]
 8001c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3e:	e03e      	b.n	8001cbe <__swsetup_r+0xba>
 8001c40:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <__swsetup_r+0xd4>)
 8001c42:	429c      	cmp	r4, r3
 8001c44:	d101      	bne.n	8001c4a <__swsetup_r+0x46>
 8001c46:	68ac      	ldr	r4, [r5, #8]
 8001c48:	e7eb      	b.n	8001c22 <__swsetup_r+0x1e>
 8001c4a:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <__swsetup_r+0xd8>)
 8001c4c:	429c      	cmp	r4, r3
 8001c4e:	bf08      	it	eq
 8001c50:	68ec      	ldreq	r4, [r5, #12]
 8001c52:	e7e6      	b.n	8001c22 <__swsetup_r+0x1e>
 8001c54:	0758      	lsls	r0, r3, #29
 8001c56:	d512      	bpl.n	8001c7e <__swsetup_r+0x7a>
 8001c58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c5a:	b141      	cbz	r1, 8001c6e <__swsetup_r+0x6a>
 8001c5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c60:	4299      	cmp	r1, r3
 8001c62:	d002      	beq.n	8001c6a <__swsetup_r+0x66>
 8001c64:	4630      	mov	r0, r6
 8001c66:	f000 f991 	bl	8001f8c <_free_r>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	6363      	str	r3, [r4, #52]	; 0x34
 8001c6e:	89a3      	ldrh	r3, [r4, #12]
 8001c70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c74:	81a3      	strh	r3, [r4, #12]
 8001c76:	2300      	movs	r3, #0
 8001c78:	6063      	str	r3, [r4, #4]
 8001c7a:	6923      	ldr	r3, [r4, #16]
 8001c7c:	6023      	str	r3, [r4, #0]
 8001c7e:	89a3      	ldrh	r3, [r4, #12]
 8001c80:	f043 0308 	orr.w	r3, r3, #8
 8001c84:	81a3      	strh	r3, [r4, #12]
 8001c86:	6923      	ldr	r3, [r4, #16]
 8001c88:	b94b      	cbnz	r3, 8001c9e <__swsetup_r+0x9a>
 8001c8a:	89a3      	ldrh	r3, [r4, #12]
 8001c8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c94:	d003      	beq.n	8001c9e <__swsetup_r+0x9a>
 8001c96:	4621      	mov	r1, r4
 8001c98:	4630      	mov	r0, r6
 8001c9a:	f000 f92b 	bl	8001ef4 <__smakebuf_r>
 8001c9e:	89a0      	ldrh	r0, [r4, #12]
 8001ca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ca4:	f010 0301 	ands.w	r3, r0, #1
 8001ca8:	d00a      	beq.n	8001cc0 <__swsetup_r+0xbc>
 8001caa:	2300      	movs	r3, #0
 8001cac:	60a3      	str	r3, [r4, #8]
 8001cae:	6963      	ldr	r3, [r4, #20]
 8001cb0:	425b      	negs	r3, r3
 8001cb2:	61a3      	str	r3, [r4, #24]
 8001cb4:	6923      	ldr	r3, [r4, #16]
 8001cb6:	b943      	cbnz	r3, 8001cca <__swsetup_r+0xc6>
 8001cb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001cbc:	d1ba      	bne.n	8001c34 <__swsetup_r+0x30>
 8001cbe:	bd70      	pop	{r4, r5, r6, pc}
 8001cc0:	0781      	lsls	r1, r0, #30
 8001cc2:	bf58      	it	pl
 8001cc4:	6963      	ldrpl	r3, [r4, #20]
 8001cc6:	60a3      	str	r3, [r4, #8]
 8001cc8:	e7f4      	b.n	8001cb4 <__swsetup_r+0xb0>
 8001cca:	2000      	movs	r0, #0
 8001ccc:	e7f7      	b.n	8001cbe <__swsetup_r+0xba>
 8001cce:	bf00      	nop
 8001cd0:	20000010 	.word	0x20000010
 8001cd4:	080020e8 	.word	0x080020e8
 8001cd8:	08002108 	.word	0x08002108
 8001cdc:	080020c8 	.word	0x080020c8

08001ce0 <_close_r>:
 8001ce0:	b538      	push	{r3, r4, r5, lr}
 8001ce2:	4d06      	ldr	r5, [pc, #24]	; (8001cfc <_close_r+0x1c>)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	4608      	mov	r0, r1
 8001cea:	602b      	str	r3, [r5, #0]
 8001cec:	f7fe fbee 	bl	80004cc <_close>
 8001cf0:	1c43      	adds	r3, r0, #1
 8001cf2:	d102      	bne.n	8001cfa <_close_r+0x1a>
 8001cf4:	682b      	ldr	r3, [r5, #0]
 8001cf6:	b103      	cbz	r3, 8001cfa <_close_r+0x1a>
 8001cf8:	6023      	str	r3, [r4, #0]
 8001cfa:	bd38      	pop	{r3, r4, r5, pc}
 8001cfc:	200000e8 	.word	0x200000e8

08001d00 <__sflush_r>:
 8001d00:	898a      	ldrh	r2, [r1, #12]
 8001d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d06:	4605      	mov	r5, r0
 8001d08:	0710      	lsls	r0, r2, #28
 8001d0a:	460c      	mov	r4, r1
 8001d0c:	d458      	bmi.n	8001dc0 <__sflush_r+0xc0>
 8001d0e:	684b      	ldr	r3, [r1, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	dc05      	bgt.n	8001d20 <__sflush_r+0x20>
 8001d14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	dc02      	bgt.n	8001d20 <__sflush_r+0x20>
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d22:	2e00      	cmp	r6, #0
 8001d24:	d0f9      	beq.n	8001d1a <__sflush_r+0x1a>
 8001d26:	2300      	movs	r3, #0
 8001d28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d2c:	682f      	ldr	r7, [r5, #0]
 8001d2e:	602b      	str	r3, [r5, #0]
 8001d30:	d032      	beq.n	8001d98 <__sflush_r+0x98>
 8001d32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d34:	89a3      	ldrh	r3, [r4, #12]
 8001d36:	075a      	lsls	r2, r3, #29
 8001d38:	d505      	bpl.n	8001d46 <__sflush_r+0x46>
 8001d3a:	6863      	ldr	r3, [r4, #4]
 8001d3c:	1ac0      	subs	r0, r0, r3
 8001d3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d40:	b10b      	cbz	r3, 8001d46 <__sflush_r+0x46>
 8001d42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d44:	1ac0      	subs	r0, r0, r3
 8001d46:	2300      	movs	r3, #0
 8001d48:	4602      	mov	r2, r0
 8001d4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d4c:	6a21      	ldr	r1, [r4, #32]
 8001d4e:	4628      	mov	r0, r5
 8001d50:	47b0      	blx	r6
 8001d52:	1c43      	adds	r3, r0, #1
 8001d54:	89a3      	ldrh	r3, [r4, #12]
 8001d56:	d106      	bne.n	8001d66 <__sflush_r+0x66>
 8001d58:	6829      	ldr	r1, [r5, #0]
 8001d5a:	291d      	cmp	r1, #29
 8001d5c:	d82c      	bhi.n	8001db8 <__sflush_r+0xb8>
 8001d5e:	4a2a      	ldr	r2, [pc, #168]	; (8001e08 <__sflush_r+0x108>)
 8001d60:	40ca      	lsrs	r2, r1
 8001d62:	07d6      	lsls	r6, r2, #31
 8001d64:	d528      	bpl.n	8001db8 <__sflush_r+0xb8>
 8001d66:	2200      	movs	r2, #0
 8001d68:	6062      	str	r2, [r4, #4]
 8001d6a:	04d9      	lsls	r1, r3, #19
 8001d6c:	6922      	ldr	r2, [r4, #16]
 8001d6e:	6022      	str	r2, [r4, #0]
 8001d70:	d504      	bpl.n	8001d7c <__sflush_r+0x7c>
 8001d72:	1c42      	adds	r2, r0, #1
 8001d74:	d101      	bne.n	8001d7a <__sflush_r+0x7a>
 8001d76:	682b      	ldr	r3, [r5, #0]
 8001d78:	b903      	cbnz	r3, 8001d7c <__sflush_r+0x7c>
 8001d7a:	6560      	str	r0, [r4, #84]	; 0x54
 8001d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d7e:	602f      	str	r7, [r5, #0]
 8001d80:	2900      	cmp	r1, #0
 8001d82:	d0ca      	beq.n	8001d1a <__sflush_r+0x1a>
 8001d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d88:	4299      	cmp	r1, r3
 8001d8a:	d002      	beq.n	8001d92 <__sflush_r+0x92>
 8001d8c:	4628      	mov	r0, r5
 8001d8e:	f000 f8fd 	bl	8001f8c <_free_r>
 8001d92:	2000      	movs	r0, #0
 8001d94:	6360      	str	r0, [r4, #52]	; 0x34
 8001d96:	e7c1      	b.n	8001d1c <__sflush_r+0x1c>
 8001d98:	6a21      	ldr	r1, [r4, #32]
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	4628      	mov	r0, r5
 8001d9e:	47b0      	blx	r6
 8001da0:	1c41      	adds	r1, r0, #1
 8001da2:	d1c7      	bne.n	8001d34 <__sflush_r+0x34>
 8001da4:	682b      	ldr	r3, [r5, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0c4      	beq.n	8001d34 <__sflush_r+0x34>
 8001daa:	2b1d      	cmp	r3, #29
 8001dac:	d001      	beq.n	8001db2 <__sflush_r+0xb2>
 8001dae:	2b16      	cmp	r3, #22
 8001db0:	d101      	bne.n	8001db6 <__sflush_r+0xb6>
 8001db2:	602f      	str	r7, [r5, #0]
 8001db4:	e7b1      	b.n	8001d1a <__sflush_r+0x1a>
 8001db6:	89a3      	ldrh	r3, [r4, #12]
 8001db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dbc:	81a3      	strh	r3, [r4, #12]
 8001dbe:	e7ad      	b.n	8001d1c <__sflush_r+0x1c>
 8001dc0:	690f      	ldr	r7, [r1, #16]
 8001dc2:	2f00      	cmp	r7, #0
 8001dc4:	d0a9      	beq.n	8001d1a <__sflush_r+0x1a>
 8001dc6:	0793      	lsls	r3, r2, #30
 8001dc8:	680e      	ldr	r6, [r1, #0]
 8001dca:	bf08      	it	eq
 8001dcc:	694b      	ldreq	r3, [r1, #20]
 8001dce:	600f      	str	r7, [r1, #0]
 8001dd0:	bf18      	it	ne
 8001dd2:	2300      	movne	r3, #0
 8001dd4:	eba6 0807 	sub.w	r8, r6, r7
 8001dd8:	608b      	str	r3, [r1, #8]
 8001dda:	f1b8 0f00 	cmp.w	r8, #0
 8001dde:	dd9c      	ble.n	8001d1a <__sflush_r+0x1a>
 8001de0:	6a21      	ldr	r1, [r4, #32]
 8001de2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001de4:	4643      	mov	r3, r8
 8001de6:	463a      	mov	r2, r7
 8001de8:	4628      	mov	r0, r5
 8001dea:	47b0      	blx	r6
 8001dec:	2800      	cmp	r0, #0
 8001dee:	dc06      	bgt.n	8001dfe <__sflush_r+0xfe>
 8001df0:	89a3      	ldrh	r3, [r4, #12]
 8001df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001df6:	81a3      	strh	r3, [r4, #12]
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	e78e      	b.n	8001d1c <__sflush_r+0x1c>
 8001dfe:	4407      	add	r7, r0
 8001e00:	eba8 0800 	sub.w	r8, r8, r0
 8001e04:	e7e9      	b.n	8001dda <__sflush_r+0xda>
 8001e06:	bf00      	nop
 8001e08:	20400001 	.word	0x20400001

08001e0c <_fflush_r>:
 8001e0c:	b538      	push	{r3, r4, r5, lr}
 8001e0e:	690b      	ldr	r3, [r1, #16]
 8001e10:	4605      	mov	r5, r0
 8001e12:	460c      	mov	r4, r1
 8001e14:	b913      	cbnz	r3, 8001e1c <_fflush_r+0x10>
 8001e16:	2500      	movs	r5, #0
 8001e18:	4628      	mov	r0, r5
 8001e1a:	bd38      	pop	{r3, r4, r5, pc}
 8001e1c:	b118      	cbz	r0, 8001e26 <_fflush_r+0x1a>
 8001e1e:	6983      	ldr	r3, [r0, #24]
 8001e20:	b90b      	cbnz	r3, 8001e26 <_fflush_r+0x1a>
 8001e22:	f7ff fa15 	bl	8001250 <__sinit>
 8001e26:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <_fflush_r+0x6c>)
 8001e28:	429c      	cmp	r4, r3
 8001e2a:	d11b      	bne.n	8001e64 <_fflush_r+0x58>
 8001e2c:	686c      	ldr	r4, [r5, #4]
 8001e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0ef      	beq.n	8001e16 <_fflush_r+0xa>
 8001e36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e38:	07d0      	lsls	r0, r2, #31
 8001e3a:	d404      	bmi.n	8001e46 <_fflush_r+0x3a>
 8001e3c:	0599      	lsls	r1, r3, #22
 8001e3e:	d402      	bmi.n	8001e46 <_fflush_r+0x3a>
 8001e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e42:	f7ff faa3 	bl	800138c <__retarget_lock_acquire_recursive>
 8001e46:	4628      	mov	r0, r5
 8001e48:	4621      	mov	r1, r4
 8001e4a:	f7ff ff59 	bl	8001d00 <__sflush_r>
 8001e4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e50:	07da      	lsls	r2, r3, #31
 8001e52:	4605      	mov	r5, r0
 8001e54:	d4e0      	bmi.n	8001e18 <_fflush_r+0xc>
 8001e56:	89a3      	ldrh	r3, [r4, #12]
 8001e58:	059b      	lsls	r3, r3, #22
 8001e5a:	d4dd      	bmi.n	8001e18 <_fflush_r+0xc>
 8001e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e5e:	f7ff fa96 	bl	800138e <__retarget_lock_release_recursive>
 8001e62:	e7d9      	b.n	8001e18 <_fflush_r+0xc>
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <_fflush_r+0x70>)
 8001e66:	429c      	cmp	r4, r3
 8001e68:	d101      	bne.n	8001e6e <_fflush_r+0x62>
 8001e6a:	68ac      	ldr	r4, [r5, #8]
 8001e6c:	e7df      	b.n	8001e2e <_fflush_r+0x22>
 8001e6e:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <_fflush_r+0x74>)
 8001e70:	429c      	cmp	r4, r3
 8001e72:	bf08      	it	eq
 8001e74:	68ec      	ldreq	r4, [r5, #12]
 8001e76:	e7da      	b.n	8001e2e <_fflush_r+0x22>
 8001e78:	080020e8 	.word	0x080020e8
 8001e7c:	08002108 	.word	0x08002108
 8001e80:	080020c8 	.word	0x080020c8

08001e84 <_lseek_r>:
 8001e84:	b538      	push	{r3, r4, r5, lr}
 8001e86:	4d07      	ldr	r5, [pc, #28]	; (8001ea4 <_lseek_r+0x20>)
 8001e88:	4604      	mov	r4, r0
 8001e8a:	4608      	mov	r0, r1
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	2200      	movs	r2, #0
 8001e90:	602a      	str	r2, [r5, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	f7fe fb41 	bl	800051a <_lseek>
 8001e98:	1c43      	adds	r3, r0, #1
 8001e9a:	d102      	bne.n	8001ea2 <_lseek_r+0x1e>
 8001e9c:	682b      	ldr	r3, [r5, #0]
 8001e9e:	b103      	cbz	r3, 8001ea2 <_lseek_r+0x1e>
 8001ea0:	6023      	str	r3, [r4, #0]
 8001ea2:	bd38      	pop	{r3, r4, r5, pc}
 8001ea4:	200000e8 	.word	0x200000e8

08001ea8 <__swhatbuf_r>:
 8001ea8:	b570      	push	{r4, r5, r6, lr}
 8001eaa:	460e      	mov	r6, r1
 8001eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001eb0:	2900      	cmp	r1, #0
 8001eb2:	b096      	sub	sp, #88	; 0x58
 8001eb4:	4614      	mov	r4, r2
 8001eb6:	461d      	mov	r5, r3
 8001eb8:	da08      	bge.n	8001ecc <__swhatbuf_r+0x24>
 8001eba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	602a      	str	r2, [r5, #0]
 8001ec2:	061a      	lsls	r2, r3, #24
 8001ec4:	d410      	bmi.n	8001ee8 <__swhatbuf_r+0x40>
 8001ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eca:	e00e      	b.n	8001eea <__swhatbuf_r+0x42>
 8001ecc:	466a      	mov	r2, sp
 8001ece:	f000 f8bb 	bl	8002048 <_fstat_r>
 8001ed2:	2800      	cmp	r0, #0
 8001ed4:	dbf1      	blt.n	8001eba <__swhatbuf_r+0x12>
 8001ed6:	9a01      	ldr	r2, [sp, #4]
 8001ed8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001edc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001ee0:	425a      	negs	r2, r3
 8001ee2:	415a      	adcs	r2, r3
 8001ee4:	602a      	str	r2, [r5, #0]
 8001ee6:	e7ee      	b.n	8001ec6 <__swhatbuf_r+0x1e>
 8001ee8:	2340      	movs	r3, #64	; 0x40
 8001eea:	2000      	movs	r0, #0
 8001eec:	6023      	str	r3, [r4, #0]
 8001eee:	b016      	add	sp, #88	; 0x58
 8001ef0:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ef4 <__smakebuf_r>:
 8001ef4:	898b      	ldrh	r3, [r1, #12]
 8001ef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ef8:	079d      	lsls	r5, r3, #30
 8001efa:	4606      	mov	r6, r0
 8001efc:	460c      	mov	r4, r1
 8001efe:	d507      	bpl.n	8001f10 <__smakebuf_r+0x1c>
 8001f00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001f04:	6023      	str	r3, [r4, #0]
 8001f06:	6123      	str	r3, [r4, #16]
 8001f08:	2301      	movs	r3, #1
 8001f0a:	6163      	str	r3, [r4, #20]
 8001f0c:	b002      	add	sp, #8
 8001f0e:	bd70      	pop	{r4, r5, r6, pc}
 8001f10:	ab01      	add	r3, sp, #4
 8001f12:	466a      	mov	r2, sp
 8001f14:	f7ff ffc8 	bl	8001ea8 <__swhatbuf_r>
 8001f18:	9900      	ldr	r1, [sp, #0]
 8001f1a:	4605      	mov	r5, r0
 8001f1c:	4630      	mov	r0, r6
 8001f1e:	f7ff fa57 	bl	80013d0 <_malloc_r>
 8001f22:	b948      	cbnz	r0, 8001f38 <__smakebuf_r+0x44>
 8001f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f28:	059a      	lsls	r2, r3, #22
 8001f2a:	d4ef      	bmi.n	8001f0c <__smakebuf_r+0x18>
 8001f2c:	f023 0303 	bic.w	r3, r3, #3
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	81a3      	strh	r3, [r4, #12]
 8001f36:	e7e3      	b.n	8001f00 <__smakebuf_r+0xc>
 8001f38:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <__smakebuf_r+0x7c>)
 8001f3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8001f3c:	89a3      	ldrh	r3, [r4, #12]
 8001f3e:	6020      	str	r0, [r4, #0]
 8001f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f44:	81a3      	strh	r3, [r4, #12]
 8001f46:	9b00      	ldr	r3, [sp, #0]
 8001f48:	6163      	str	r3, [r4, #20]
 8001f4a:	9b01      	ldr	r3, [sp, #4]
 8001f4c:	6120      	str	r0, [r4, #16]
 8001f4e:	b15b      	cbz	r3, 8001f68 <__smakebuf_r+0x74>
 8001f50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f54:	4630      	mov	r0, r6
 8001f56:	f000 f889 	bl	800206c <_isatty_r>
 8001f5a:	b128      	cbz	r0, 8001f68 <__smakebuf_r+0x74>
 8001f5c:	89a3      	ldrh	r3, [r4, #12]
 8001f5e:	f023 0303 	bic.w	r3, r3, #3
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	81a3      	strh	r3, [r4, #12]
 8001f68:	89a0      	ldrh	r0, [r4, #12]
 8001f6a:	4305      	orrs	r5, r0
 8001f6c:	81a5      	strh	r5, [r4, #12]
 8001f6e:	e7cd      	b.n	8001f0c <__smakebuf_r+0x18>
 8001f70:	080011e9 	.word	0x080011e9

08001f74 <__malloc_lock>:
 8001f74:	4801      	ldr	r0, [pc, #4]	; (8001f7c <__malloc_lock+0x8>)
 8001f76:	f7ff ba09 	b.w	800138c <__retarget_lock_acquire_recursive>
 8001f7a:	bf00      	nop
 8001f7c:	200000dc 	.word	0x200000dc

08001f80 <__malloc_unlock>:
 8001f80:	4801      	ldr	r0, [pc, #4]	; (8001f88 <__malloc_unlock+0x8>)
 8001f82:	f7ff ba04 	b.w	800138e <__retarget_lock_release_recursive>
 8001f86:	bf00      	nop
 8001f88:	200000dc 	.word	0x200000dc

08001f8c <_free_r>:
 8001f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f8e:	2900      	cmp	r1, #0
 8001f90:	d044      	beq.n	800201c <_free_r+0x90>
 8001f92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f96:	9001      	str	r0, [sp, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f1a1 0404 	sub.w	r4, r1, #4
 8001f9e:	bfb8      	it	lt
 8001fa0:	18e4      	addlt	r4, r4, r3
 8001fa2:	f7ff ffe7 	bl	8001f74 <__malloc_lock>
 8001fa6:	4a1e      	ldr	r2, [pc, #120]	; (8002020 <_free_r+0x94>)
 8001fa8:	9801      	ldr	r0, [sp, #4]
 8001faa:	6813      	ldr	r3, [r2, #0]
 8001fac:	b933      	cbnz	r3, 8001fbc <_free_r+0x30>
 8001fae:	6063      	str	r3, [r4, #4]
 8001fb0:	6014      	str	r4, [r2, #0]
 8001fb2:	b003      	add	sp, #12
 8001fb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001fb8:	f7ff bfe2 	b.w	8001f80 <__malloc_unlock>
 8001fbc:	42a3      	cmp	r3, r4
 8001fbe:	d908      	bls.n	8001fd2 <_free_r+0x46>
 8001fc0:	6825      	ldr	r5, [r4, #0]
 8001fc2:	1961      	adds	r1, r4, r5
 8001fc4:	428b      	cmp	r3, r1
 8001fc6:	bf01      	itttt	eq
 8001fc8:	6819      	ldreq	r1, [r3, #0]
 8001fca:	685b      	ldreq	r3, [r3, #4]
 8001fcc:	1949      	addeq	r1, r1, r5
 8001fce:	6021      	streq	r1, [r4, #0]
 8001fd0:	e7ed      	b.n	8001fae <_free_r+0x22>
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	b10b      	cbz	r3, 8001fdc <_free_r+0x50>
 8001fd8:	42a3      	cmp	r3, r4
 8001fda:	d9fa      	bls.n	8001fd2 <_free_r+0x46>
 8001fdc:	6811      	ldr	r1, [r2, #0]
 8001fde:	1855      	adds	r5, r2, r1
 8001fe0:	42a5      	cmp	r5, r4
 8001fe2:	d10b      	bne.n	8001ffc <_free_r+0x70>
 8001fe4:	6824      	ldr	r4, [r4, #0]
 8001fe6:	4421      	add	r1, r4
 8001fe8:	1854      	adds	r4, r2, r1
 8001fea:	42a3      	cmp	r3, r4
 8001fec:	6011      	str	r1, [r2, #0]
 8001fee:	d1e0      	bne.n	8001fb2 <_free_r+0x26>
 8001ff0:	681c      	ldr	r4, [r3, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	6053      	str	r3, [r2, #4]
 8001ff6:	4421      	add	r1, r4
 8001ff8:	6011      	str	r1, [r2, #0]
 8001ffa:	e7da      	b.n	8001fb2 <_free_r+0x26>
 8001ffc:	d902      	bls.n	8002004 <_free_r+0x78>
 8001ffe:	230c      	movs	r3, #12
 8002000:	6003      	str	r3, [r0, #0]
 8002002:	e7d6      	b.n	8001fb2 <_free_r+0x26>
 8002004:	6825      	ldr	r5, [r4, #0]
 8002006:	1961      	adds	r1, r4, r5
 8002008:	428b      	cmp	r3, r1
 800200a:	bf04      	itt	eq
 800200c:	6819      	ldreq	r1, [r3, #0]
 800200e:	685b      	ldreq	r3, [r3, #4]
 8002010:	6063      	str	r3, [r4, #4]
 8002012:	bf04      	itt	eq
 8002014:	1949      	addeq	r1, r1, r5
 8002016:	6021      	streq	r1, [r4, #0]
 8002018:	6054      	str	r4, [r2, #4]
 800201a:	e7ca      	b.n	8001fb2 <_free_r+0x26>
 800201c:	b003      	add	sp, #12
 800201e:	bd30      	pop	{r4, r5, pc}
 8002020:	200000e0 	.word	0x200000e0

08002024 <_read_r>:
 8002024:	b538      	push	{r3, r4, r5, lr}
 8002026:	4d07      	ldr	r5, [pc, #28]	; (8002044 <_read_r+0x20>)
 8002028:	4604      	mov	r4, r0
 800202a:	4608      	mov	r0, r1
 800202c:	4611      	mov	r1, r2
 800202e:	2200      	movs	r2, #0
 8002030:	602a      	str	r2, [r5, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	f7fe fa11 	bl	800045a <_read>
 8002038:	1c43      	adds	r3, r0, #1
 800203a:	d102      	bne.n	8002042 <_read_r+0x1e>
 800203c:	682b      	ldr	r3, [r5, #0]
 800203e:	b103      	cbz	r3, 8002042 <_read_r+0x1e>
 8002040:	6023      	str	r3, [r4, #0]
 8002042:	bd38      	pop	{r3, r4, r5, pc}
 8002044:	200000e8 	.word	0x200000e8

08002048 <_fstat_r>:
 8002048:	b538      	push	{r3, r4, r5, lr}
 800204a:	4d07      	ldr	r5, [pc, #28]	; (8002068 <_fstat_r+0x20>)
 800204c:	2300      	movs	r3, #0
 800204e:	4604      	mov	r4, r0
 8002050:	4608      	mov	r0, r1
 8002052:	4611      	mov	r1, r2
 8002054:	602b      	str	r3, [r5, #0]
 8002056:	f7fe fa45 	bl	80004e4 <_fstat>
 800205a:	1c43      	adds	r3, r0, #1
 800205c:	d102      	bne.n	8002064 <_fstat_r+0x1c>
 800205e:	682b      	ldr	r3, [r5, #0]
 8002060:	b103      	cbz	r3, 8002064 <_fstat_r+0x1c>
 8002062:	6023      	str	r3, [r4, #0]
 8002064:	bd38      	pop	{r3, r4, r5, pc}
 8002066:	bf00      	nop
 8002068:	200000e8 	.word	0x200000e8

0800206c <_isatty_r>:
 800206c:	b538      	push	{r3, r4, r5, lr}
 800206e:	4d06      	ldr	r5, [pc, #24]	; (8002088 <_isatty_r+0x1c>)
 8002070:	2300      	movs	r3, #0
 8002072:	4604      	mov	r4, r0
 8002074:	4608      	mov	r0, r1
 8002076:	602b      	str	r3, [r5, #0]
 8002078:	f7fe fa44 	bl	8000504 <_isatty>
 800207c:	1c43      	adds	r3, r0, #1
 800207e:	d102      	bne.n	8002086 <_isatty_r+0x1a>
 8002080:	682b      	ldr	r3, [r5, #0]
 8002082:	b103      	cbz	r3, 8002086 <_isatty_r+0x1a>
 8002084:	6023      	str	r3, [r4, #0]
 8002086:	bd38      	pop	{r3, r4, r5, pc}
 8002088:	200000e8 	.word	0x200000e8

0800208c <_init>:
 800208c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800208e:	bf00      	nop
 8002090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002092:	bc08      	pop	{r3}
 8002094:	469e      	mov	lr, r3
 8002096:	4770      	bx	lr

08002098 <_fini>:
 8002098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209a:	bf00      	nop
 800209c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800209e:	bc08      	pop	{r3}
 80020a0:	469e      	mov	lr, r3
 80020a2:	4770      	bx	lr
